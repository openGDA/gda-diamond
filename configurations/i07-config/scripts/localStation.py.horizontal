#localStation.py
#For beamline specific initialisation code.
print "===================================================================";
print " Performing Beanline I07 specific initialisation code (localStation.py).";
print

#Setup the environment variables
import sys;
from os import system;
from time import sleep;

from gda.configuration.properties import LocalProperties;
from gdascripts.utils import *;

import scisoftpy as dnp;
	
# Get the locatation of the GDA beamline script directory
gdaScriptDir = LocalProperties.get("gda.jython.gdaScriptDir") + "/";

# Get the location of the USERS script directory
userScriptDir = LocalProperties.get("gda.jython.userScriptDir") + "/";
	


try:
	print "-------------------------------------------------------------------"
	print "Setup the basic beamline functions"
	execfile(gdaScriptDir + "BeamlineI07/beamline.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Logger Error"
	raise "Logger error";


try:
	print "-------------------------------------------------------------------"
	print "Setup the timers"
	execfile(gdaScriptDir + "BeamlineI07/setTimers.py");
	
	#Setup a variety of scans
	#print
	#print "===================================================================";
	#execfile(gdaScriptDir + "Diamond/Utility/setScans.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Serious errors when running the localstation.py"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:
	print "-------------------------------------------------------------------"
	print "Enable the multiple region scan";
	execfile(gdaScriptDir + "BeamlineI07/setSpecialScans.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  rscan Error "
	logger.dump("---> ", exceptionType, exception, traceback)

try:	
	#Set up the Diamond NumPy
	print "-------------------------------------------------------------------"
	print "Note: Use dnp (Diamond NumPy) from scisoftpy for data handling and plotting in GDA"
	print "Note: Use help dnp for all commands"
	print "Note: Use help <component> for help on all components ..." 
	print "      (dnp.core, dnp.io, dnp.maths, dnp.plot, dnp.image)"
	print "For example: "
	print "		 To load data:  data=dnp.io.load(/full/path/to/data/file, formats=['srs'], asdict=True)"
	print "		 To plot data:  dnp.plot.line(x, y)"
	print "		 To plot image: dnp.plot.image(data)"
	
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Serious errors when running the Data Analysis packages"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:	
	#User Motor Support
	print
	print "===================================================================";
	print "Motor Support"
	execfile(gdaScriptDir + "BeamlineI07/useMotors.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Motor support Error"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:
	print
	print "===================================================================";
	print "Creating the fast shutter fs"
	execfile(gdaScriptDir + "BeamlineI07/setFastShutter.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  fastshutter Error"
	logger.dump("---> ", exceptionType, exception, traceback)
	

try:	
	#Filters and FilterSet Support
	print
	print "===================================================================";
	print "FilterSet Support"
	execfile(gdaScriptDir + "BeamlineI07/useFilters.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Filterset Error"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:
	#ADC Scaler Card Support
	#Cyberstar Scintillation Detector and APD-ACE Pulse Processing Unit Support
	#Struct Scaler Card Support
	print
	print "===================================================================";
	print "Ion Chamber ADC Scaler Support"
	print "Use ionsc for the scaler card and ionsc1, ionsc2, ... ionsc8 on channels"
	print "===================================================================";
	print "Use cyberstar and apdstar  for Cyberstar Scintillation detector and APD-ACE pulse unit respectively"
	print "===================================================================";
	print "EH1 Struct Scaler Support"
	print "Use eh1sc for the scaler card and eh1sc01, eh1sc02, ... eh1sc32 on channels"
	execfile(gdaScriptDir + "BeamlineI07/useDetectors.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Point Detector Error "
	logger.dump("---> ", exceptionType, exception, traceback)

	
	# initialises scaler rack (BL07I-EA-DET-01:) - Rob Walton 20090807
	#run("init_setup_scaler.py")
	
	# set up by Rob Walton for support of Pilatus and Fleacam functionality - 20090807
	#run("init_scan_commands_and_processing.py")

try:	
	# initialise the PDs top set and monitor the bimorph voltages in HFM and VFM
	#run("init_bimorph_voltage_setter.py")
	#execfile(gdaScriptDir + "BeamlineI07/init_bimorph_voltage_setter.py");
	execfile(gdaScriptDir + "BeamlineI07/setBimorphMirror.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Bimorph Mirror  Error"
	logger.dump("---> ", exceptionType, exception, traceback)

try:	
	print
	print "===================================================================";
	print "Diffractometer setup"
	
	# normal vertical scattering geometry (unchanged including the diff1mode stuff)
	##execfile(gdaScriptDir + "BeamlineI07/diffractometer.py");
	
	# horizontal scattering geometry (surface normal vertical)
	# bypasses the diff1mode stuff
	execfile(gdaScriptDir + "BeamlineI07/diff1_horizontal_geometry.py");	
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  diffcalc Error"
	logger.dump("---> ", exceptionType, exception, traceback)

try:
	print
	print "===================================================================";
	print "Creating the DCD motors for Liquid Surface Reflectivity Measurement"
	execfile(gdaScriptDir + "BeamlineI07/useDCD.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  DCD"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:
	print
	print "===================================================================";
	print "Creating Hexapod1 Pivot Points"
	execfile(gdaScriptDir + "BeamlineI07/useHex1.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Hexapod 1 Pivot Point Error"
	logger.dump("---> ", exceptionType, exception, traceback)

try:
	print
	print "===================================================================";
	print "Creating Hexapod2 Pivot Points"
	execfile(gdaScriptDir + "BeamlineI07/useHex2.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Hexapod 2 Pivot Point Error"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:
	print
	print "===================================================================";
	print "Fast scan setup"
	execfile(gdaScriptDir + "BeamlineI07/setFastScan.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Fast Scan Error"
	logger.dump("---> ", exceptionType, exception, traceback)
	
try:
	print
	print "===================================================================";
	print "Metadata Header setup"
	execfile(gdaScriptDir + "BeamlineI07/setSrsDataFileHeader.py");
	
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Errors when setup the Metadata Header."
	logger.dump("---> ", exceptionType, exception, traceback)

try:	
	#Change the defautl output format
	print "-------------------------------------------------------------------"
	print "Change the defautl output format according to I07 requirements"
	execfile(gdaScriptDir + "BeamlineI07/setOutputFormat.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Errors when changing the default output format"
	logger.dump("---> ", exceptionType, exception, traceback)
try:
	#Constants used on this beamline
	execfile(gdaScriptDir + "BeamlineI07/createAlias.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Errors when creating the beamline alias"
	logger.dump("---> ", exceptionType, exception, traceback)


#Pilatus Support
print
print "===================================================================";
print "Pilatus Support"
try:
#	execfile(gdaScriptDir + "BeamlineI07/useEpicsPilatus100K.py");
	execfile(gdaScriptDir + "BeamlineI07/useAreaDetectorPilatus1.py");
	#Setup the Flea Camera support in GDA
	#execfile(gdaScriptDir + "BeamlineI07/cameras.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Pilatus 1 Detector Error"
	logger.dump("---> ", exceptionType, exception, traceback)

try:
#	execfile(gdaScriptDir + "BeamlineI07/useEpicsPilatus2M.py");
	execfile(gdaScriptDir + "BeamlineI07/useAreaDetectorPilatus2.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Pilatus 2 Detector Error"
	logger.dump("---> ", exceptionType, exception, traceback)

try:
	execfile(gdaScriptDir + "BeamlineI07/useAreaDetectorPilatus3.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Pilatus 3 Detector Error"
	logger.dump("---> ", exceptionType, exception, traceback)
	
#try:
	#Setup the Flea Camera support in GDA
	#execfile(gdaScriptDir + "BeamlineI07/cameras.py");
#except:
#	exceptionType, exception, traceback=sys.exc_info();
#	logger.fullLog(None, "Flea Camera Error", exceptionType, exception, traceback, True);
	
try:
	#Dummy Camera Setup
	print
	print "===================================================================";
	execfile(gdaScriptDir + "BeamlineI07/useDummyCam.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Dummy Camera Error"
	logger.dump("---> ", exceptionType, exception, traceback)

try:
	#Euro Thermo Controller Setup
	print
	print "===================================================================";
	execfile(gdaScriptDir + "BeamlineI07/useEuroThermo.py");
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  Euro Thermo Controller Error"
	logger.dump("---> ", exceptionType, exception, traceback)


try:	
	#The last thing: Performing user specific initialisation code"
	print
	print "===================================================================";
	print "Performing user specific initialisation code (MainHutch.py)"
	execfile(userScriptDir + "MainHutch.py");

except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  user's MainHutch.py Error"
	logger.dump("---> ", exceptionType, exception, traceback)


try:	
	##to setup the scan processing wrappers
	#from gdascripts.scan.installStandardScansWithProcessing import * #@UnusedWildImport
	#scan_processor.rootNamespaceDict=globals()
	#import gdascripts.utils #@UnusedImport
	#gdascripts.scan.concurrentScanWrapper.ROOT_NAMESPACE_DICT = globals()
	pass;
except:
	exceptionType, exception, traceback=sys.exc_info();
	print "XXXXXXXXXX:  scan wrapper Error"
	logger.dump("---> ", exceptionType, exception, traceback)

print "==================================================================="; print; print;
