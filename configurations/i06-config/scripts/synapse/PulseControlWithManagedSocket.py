'''
define 'pulse' and 'pulseAndMeas' commands for controlling pulse sweep through a sample via Synapse switch box using signals from keithley 2461

Created on 9 Nov 2018

@author: fy65
'''
from synapse.SynapseSwitchBox import synapse_s1, synapse_s2, synapse_s3, synapse_s4, synapse_setall,\
    synapse_cg
from time import sleep
from synapse.keithley_class import Keithley2461
from gda.jython import JythonServerFacade

KEITHLEY_IP_ADDRESS="10.106.8.8"
KEITHLEY_SOCKET_PORT=5025
KEITHLEY_COMMAND_TERMINATOR='\n'
curr, volt = ['Current','Voltage']
KEITHLEY_SOURCE_MODE=curr
SLEEP_FOR_FORAMT = "Sleep for %f"
CANNOT_USE_SAME_TERMINAL_FOR_BOTH_HING_AND_LOW = "Cannot use the same Synapse terminal for both high and low."
CANNOT_USE_SAME_TERMINAL_MORE_THAN_ONCE = "Cannot use the same Synapse terminal more than once in this command."
OPEN_CIRCUIT = "Open circuit"
SOURCE_HIGH = "Source high"
SOURCE_LOW = "Source low"

def whichSynapseTerminal(arg):
    if arg == 1:
        synapse = synapse_s1
    elif arg == 2:
        synapse = synapse_s2
    elif arg == 3:
        synapse = synapse_s3
    elif arg == 4:
        synapse = synapse_s4
    elif arg == 0:
        synapse = synapse_cg
    else:
        raise ValueError("Input must be in [0,1,2,3,4]")
    return synapse


def createKeithley():
    keithley = Keithley2461("keithley", KEITHLEY_IP_ADDRESS, KEITHLEY_SOCKET_PORT, KEITHLEY_COMMAND_TERMINATOR)
    keithley.communicator.configure()
    keithley.reset()
    return keithley

def generatePulseLinearSweepFromKeithley(source, sense, stop, pulse_width, time_delay, number_of_pulses):
    try:
        keithley = createKeithley()
        keithley.sourceFunction(source)
        keithley.senseFunction(sense)
        keithley.senseAutoRange(sense, 'ON')
        keithley.sourcePulseLinearSweep(source, stop, pulse_width, time_delay, number_of_pulses)
        keithley.startPulse()
        keithley.wait()
        print(SLEEP_FOR_FORAMT % ((pulse_width+time_delay)*number_of_pulses*3+0.1))
        sleep((pulse_width+time_delay)*number_of_pulses*3+0.1)
    finally:
        keithley.closeConnection()

def generateCurrentPulseFromKeithley(pulse_level, pulse_width, time_delay, number_of_pulses):
    try:
        keithley = createKeithley()
        keithley.sourceFunction('CURR')
        keithley.senseFunction('VOLT')
        keithley.senseAutoRange('VOLT', 'ON')
        keithley.sourcePulseTrain('CURR', pulse_level, pulse_width, number_of_pulses, 'OFF', time_delay)
        keithley.startPulse()
        keithley.wait()
        print(SLEEP_FOR_FORAMT % ((pulse_width+time_delay)*number_of_pulses*3+0.1))
        sleep((pulse_width+time_delay)*number_of_pulses*3+0.1)
    finally:
        keithley.closeConnection()

def generateVoltagePulseFromKeithley(pulse_level, pulse_width, time_delay, number_of_pulses):
    try:
        keithley = createKeithley()
        keithley.sourceFunction('VOLT')
        keithley.senseFunction('CURR')
        keithley.senseAutoRange('CURR', 'ON')
        keithley.sourcePulseTrain('VOLT', pulse_level, pulse_width, number_of_pulses, 'OFF', time_delay)
        keithley.startPulse()
        keithley.wait()
        print(SLEEP_FOR_FORAMT % ((pulse_width+time_delay)*number_of_pulses*3+0.1))
        sleep((pulse_width+time_delay)*number_of_pulses*3+0.1)
    finally:
        keithley.closeConnection()

def pulseCurrent(*args):
    pulse(*args, KEITHLEY_SOURCE_MODE=curr)
    
def pulseVoltage(*args):
    pulse(*args, KEITHLEY_SOURCE_MODE=volt)
    
def pulse(*args, **kwargs):
    ''' send pulse sweep generated by Keithley 2461 to the sample via Synapse Switch Box.
    This command takes only 6 or 8 input parameters:
        The first 2 (in 6 parameters case) or 4 (in 8 parameters case) parameters defines the contact points in the Synapse Switch Box;
        The last 4 parameters defines pulse sweep to be generated by the Keithley 2461.
    Command syntax:
        pulse source_high source_low current width timeDelay numberOfPulses
            for 6 input parameters
        pulse source_1_high  source_2_high source_1_low source_2_low current width timeDelay  numberOfPulses
            for 8 input parameters
    '''
    if len(args) == 6:
        if args[0]==args[1]:
            raise ValueError(CANNOT_USE_SAME_TERMINAL_FOR_BOTH_HING_AND_LOW)
        synapse_setall.rawAsynchronousMoveTo(OPEN_CIRCUIT)
        #configure synapse    
        synapse_high = whichSynapseTerminal(args[0])
        synapse_high.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_low = whichSynapseTerminal(args[1])
        synapse_low.rawAsynchronousMoveTo(SOURCE_LOW)
        sleep(1) #ensure above finished before statement below 
        
        if kwargs.get('KEITHLEY_SOURCE_MODE', curr) == curr or str(JythonServerFacade.getInstance().getFromJythonNamespace('KEITHLEY_SOURCE_MODE')) == curr:
            generateCurrentPulseFromKeithley(args[2], args[3], args[4]/2, args[5])
        elif kwargs.get('KEITHLEY_SOURCE_MODE', curr) == volt or str(JythonServerFacade.getInstance().getFromJythonNamespace('KEITHLEY_SOURCE_MODE'))  == volt:
            generateVoltagePulseFromKeithley(args[2], args[3], args[4]/2, args[5])
        else:
            raise ("Keithley source mode %s is not supported" % KEITHLEY_SOURCE_MODE)
        synapse_setall.rawAsynchronousMoveTo("STV")
        print("2-points pulse sweep completed.")
      
    elif len(args)== 8:
        if len(args[:4])!=len(set(args[:4])):
            raise ValueError(CANNOT_USE_SAME_TERMINAL_MORE_THAN_ONCE)
        synapse_setall.rawAsynchronousMoveTo(OPEN_CIRCUIT)
        #configure synapse    
        synapse_high1 = whichSynapseTerminal(args[0])
        synapse_high1.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_high2 = whichSynapseTerminal(args[1])
        synapse_high2.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_low1 = whichSynapseTerminal(args[2])
        synapse_low1.rawAsynchronousMoveTo(SOURCE_LOW)
        synapse_low2 = whichSynapseTerminal(args[3])
        synapse_low2.rawAsynchronousMoveTo(SOURCE_LOW)
        sleep(1)#ensure above finished before statement below
        
        if kwargs.get('KEITHLEY_SOURCE_MODE', curr) == curr or str(JythonServerFacade.getInstance().getFromJythonNamespace('KEITHLEY_SOURCE_MODE'))  == curr:
            generateCurrentPulseFromKeithley(args[4], args[5], args[6]/2, args[7])
        elif kwargs.get('KEITHLEY_SOURCE_MODE', curr) == volt or str(JythonServerFacade.getInstance().getFromJythonNamespace('KEITHLEY_SOURCE_MODE'))  == volt:
            generateVoltagePulseFromKeithley(args[4], args[5], args[6]/2, args[7])
        else:
            raise ValueError("Keithley source mode %s is not supported" % KEITHLEY_SOURCE_MODE)
       
        synapse_setall.rawAsynchronousMoveTo("STV")
        print("4-points pulse sweep completed.")
    
    else:
        raise ValueError("Number of parameters is wrong, require 6 or 8 arguments.")


from gda.jython.commands.GeneralCommands import alias       
alias('pulse') 

def generatePulseAndMeasureFromKeithley(pulse_level, pulse_width, time_delay, number_of_pulses, nplc):
    try:
        keithley = createKeithley()
        keithley.sourceFunction('CURR')
        keithley.senseFunction('VOLT')
        keithley.senseFunctionNPLC('VOLT', nplc )
        keithley.senseAutoRange('VOLT', 'ON')
        keithley.sourcePulseTrain('CURR', pulse_level, pulse_width, number_of_pulses, 'ON', time_delay)
        keithley.startPulse()
        keithley.wait()
        print(SLEEP_FOR_FORAMT % ((pulse_width+time_delay)*number_of_pulses*3+0.1))
        sleep((pulse_width+time_delay)*number_of_pulses*3+0.1)
        data=keithley.readTraceData(number_of_pulses)
        return data
    finally:
        keithley.closeConnection()
        
def pulseAndMeas(*args):
    ''' send pulse sweep generated by Keithley 2461 to the sample via Synapse Switch Box, and return the measured data.
    This command takes only 7 or 9 input parameters:
        The first 2 (in 7 parameters case) or 4 (in 9 parameters case) parameters defines the contact points in the Synapse Switch Box;
        The next 4 parameters defines pulse sweep to be generated by the Keithley 2461.
        The last parameter defines NPLC (must be between 0.01 and 10)
    Command syntax:
        pulseAndMeas source_high source_low current width timeDelay numberOfPulses nplc
            for 7 input parameters
        pulseAndMeas source_1_high  source_2_high source_1_low source_2_low current width timeDelay  numberOfPulses nplc
            for 9 input parameters
    '''
    if len(args) == 7:
        if args[0]==args[1]:
            raise ValueError(CANNOT_USE_SAME_TERMINAL_FOR_BOTH_HING_AND_LOW)
        synapse_setall.rawAsynchronousMoveTo(OPEN_CIRCUIT)
        #configure synapse    
        synapse_high = whichSynapseTerminal(args[0])
        synapse_high.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_low = whichSynapseTerminal(args[1])
        synapse_low.rawAsynchronousMoveTo(SOURCE_LOW)
        sleep(1) #ensure above finished before statement below 
        
        data=generatePulseAndMeasureFromKeithley(args[2], args[3], args[4]/2, args[5], args[6])
        print(data)
        synapse_setall.rawAsynchronousMoveTo("STV")
        print("2-points pulse measure completed.")
      
    elif len(args)== 9:
        if len(args[:4])!=len(set(args[:4])):
            raise ValueError(CANNOT_USE_SAME_TERMINAL_MORE_THAN_ONCE)
        synapse_setall.rawAsynchronousMoveTo(OPEN_CIRCUIT)
        #configure synapse    
        synapse_high1 = whichSynapseTerminal(args[0])
        synapse_high1.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_high2 = whichSynapseTerminal(args[1])
        synapse_high2.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_low1 = whichSynapseTerminal(args[2])
        synapse_low1.rawAsynchronousMoveTo(SOURCE_LOW)
        synapse_low2 = whichSynapseTerminal(args[3])
        synapse_low2.rawAsynchronousMoveTo(SOURCE_LOW)
        sleep(1)#ensure above finished before statement below

        data=generatePulseAndMeasureFromKeithley(args[4], args[5], args[6]/2, args[7], args[8])
        print(data)
        synapse_setall.rawAsynchronousMoveTo("STV")
        print("4-points pPulse measure completed.")
    
    else:
        raise ValueError("Number of parameters is wrong, require 7 or 9 arguments.")
    
alias('pulseAndMeas') 

def measureResistance(count):
    try:
        keithley = createKeithley()
        keithley.sourceFunction('CURR')
        keithley.senseFunction('RES')
        keithley.senseAutoRange('RES', 'ON')
        keithley.senseResistanceCompensated('ON')
        resistance=keithley.readResistance(count)
        return resistance
    finally:
        keithley.closeConnection()
        
def measureVoltage(val, comp_voltage, auto_range, range_value, state, nplc):
    try:
        keithley = createKeithley()
        keithley.sourceFunction('CURR')
        keithley.sourceValue('CURR', val)
        keithley.sourceVoltageLimit(comp_voltage)
        keithley.senseFunction('VOLT')
        if auto_range:
            keithley.senseAutoRange('VOLT', 'ON')
        else:
            keithley.senseAutoRange('VOLT', 'OFF')
            keithley.senseFunctionRange('VOLT', range_value)
        keithley.senseVoltRsen(state)
        voltage=keithley.readVoltage(nplc)
        return voltage
    finally:
        keithley.closeConnection()
        
def probeRes(*args):
    ''' measure resistance of the sample using Keithley 2461 and Synapse Switch Box.
    This command takes only 7 or 9 input parameters:
        The first 2 (in 7 parameters case) or 4 (in 9 parameters case) parameters defines the contact points in the Synapse Switch Box;
        The last 5 parameters defines applied current, measuring voltage limit, auto range (0 for OFF, 1 for ON), range value, and NPLC in Keithley 2461.
    Command syntax:
        probeRes source_high  source_low current complianceVoltage autoRange rangeValue nplc
            for 7 input parameters
        probeRes source_high  source_low sense_high sense_low current complianceVoltage autoRange rangeValue nplc
            for 9 input parameters
    Note, that not all measurement ranges are allowed, for a forbidden value, it will choose the next higher value.
    '''
    if len(args) == 7:
        if args[0]==args[1]:
            raise ValueError(CANNOT_USE_SAME_TERMINAL_FOR_BOTH_HING_AND_LOW)
        synapse_setall.rawAsynchronousMoveTo(OPEN_CIRCUIT)
        sleep(1)
        #configure synapse    
        synapse_high = whichSynapseTerminal(args[0])
        synapse_high.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_low = whichSynapseTerminal(args[1])
        synapse_low.rawAsynchronousMoveTo(SOURCE_LOW)
        sleep(1) #ensure above finished before statement below 
        
        voltage=measureVoltage(args[2],args[3],args[4],args[5], 'OFF', args[6])
        print("2-point")
        print("measured voltage = " + str(float(voltage.split(",")[1]))+", thus resistance = "+str(float(voltage.split(",")[1])/float(args[2])))
        sleep(1) #ensure above finished before statement below
     
        synapse_setall.rawAsynchronousMoveTo("STV")
        print("Probe Resistance completed.")
      
    elif len(args)== 9:
        if len(args[:4])!=len(set(args[:4])):
            raise ValueError(CANNOT_USE_SAME_TERMINAL_MORE_THAN_ONCE)
        synapse_setall.rawAsynchronousMoveTo(OPEN_CIRCUIT)
        #configure synapse    
        synapse_high1 = whichSynapseTerminal(args[0])
        synapse_high1.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_high2 = whichSynapseTerminal(args[1])
        synapse_high2.rawAsynchronousMoveTo(SOURCE_LOW)
        synapse_low1 = whichSynapseTerminal(args[2])
        synapse_low1.rawAsynchronousMoveTo(SOURCE_HIGH)
        synapse_low2 = whichSynapseTerminal(args[3])
        synapse_low2.rawAsynchronousMoveTo(SOURCE_LOW)
        sleep(1)#ensure above finished before statement below

        voltage=measureVoltage(args[4], args[5],args[6],args[7], 'ON', args[8])
        print("4-point")
        print("measured voltage = " + str(float(voltage.split(",")[1]))+", thus resistance = "+str(float(voltage.split(",")[1])/args[4]))
        sleep(1) #ensure above finished before statement below
       
        synapse_setall.rawAsynchronousMoveTo("STV")
        print("Probe Resistance completed.")
    
    else:
        raise ValueError("Number of parameters is wrong, require 7 or 9 arguments.")


alias('probeRes') 

def synapseGround():
    '''set all the nodes to STV
    '''
    synapse_setall.rawAsynchronousMoveTo("STV")
alias("synapseGround")

def synapseOpen():
    '''set all the nodes to Open circuit
    '''
    synapse_setall.rawAsynchronousMoveTo("Open circuit")
alias("synapseOpen")

def synapseConnectSourceHigh(arg):
    '''connect source high to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Source high")
alias("synapseConnectSourceHigh")

def synapseConnectSourceLow(arg):
    '''connect source low to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Source low")
alias("synapseConnectSourceLow")

def synapseConnectSenseHigh(arg):
    '''connect sense high to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Sense high")
alias("synapseConnectSenseHigh")
    
def synapseConnectSenseLow(arg):
    '''connect sense low to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Sense low")
alias("synapseConnectSenseLow")

def synapseConnectSTV(arg):
    '''connect STV to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("STV")
alias("synapseConnectSTV")

def synapseConnectDVM(arg):
    '''connect DVM to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("DVM")
alias("synapseConnectDVM")

def synapseCG(arg):
    '''connect common ground to specified choice.
    '''
    if not arg in [0,1,2,3,4]:
        raise ValueError("Input must be one of [0,1,2,3,4]")
    synapse_cg.rawAsynchronousMoveTo(arg)
alias("synapseCG")

print('done')
