'''
define 'pulse' command for controlling pulse sweep through a sample via Synapse switch box using signals from keithley 2461

Created on 9 Nov 2018

@author: fy65
'''
from synapse.SynapseSwitchBox import synapse_s1, synapse_s2, synapse_s3, synapse_s4, synapse_setall
from synapse.keithleyFunctions import keithleyReset, keithleySourceCurrentMode,\
    keithleySenseVoltageMode, keithleyAutoRange, keithleyConfigurePulse,\
    keithleyStartSweep, keithleyWait, kei2461

from time import sleep

def whichSynapseTerminal(arg):
    if arg == 1:
        synapse = synapse_s1
    elif arg == 2:
        synapse = synapse_s2
    elif arg == 3:
        synapse = synapse_s3
    elif arg == 4:
        synapse = synapse_s4
    else:
        raise Exception("First input must be in [1,2,3,4]")
    return synapse

def pulse(*args):
    ''' send pulse sweep generated by Keithley 2461 to the sample via Synapse Switch Box.
    This command takes only 6 or 8 input parameters:
        The first 2 (in 6 parameters case) or 4 (in 8 parameters case) parameters defines the contact points in the Synapse Switch Box;
        The last 4 parameters defines pulse sweep to be generated by the Keithley 2461.
    Command syntax:
        pulse sc_kh sc_kl current width timeDelay numberOfPulses
            for 6 input parameters
        pulse sc_a_kh  sc_b_kh sc_a_kl sc_b_kl current width timeDelay  numberOfPulses
            for 8 input parameters
    '''
    if len(args) == 6:
        if args[0]==args[1]:
            raise Exception("Cannot use the same Synapse terminal for both high and low.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh = whichSynapseTerminal(args[0])
        synapseHigh.rawAsynchronousMoveTo("Source high")
        synapseLow = whichSynapseTerminal(args[1])
        synapseLow.rawAsynchronousMoveTo("Source low")
        sleep(0.2) #ensure above finished before statement below
        #configure keithley
        keithleyReset(kei2461)
        keithleySourceCurrentMode(kei2461)
        keithleySenseVoltageMode(kei2461)
        keithleyAutoRange(kei2461)
        keithleyConfigurePulse(kei2461, args[2], args[3], args[4], args[5])
        keithleyStartSweep(kei2461)
        keithleyWait(kei2461)
        sleep(0.2) #ensure above finished before statement below
        
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Pulse sweep completed."
      
    elif len(args)== 8:
        if len(args[:4])!=len(set(args[:4])):
            raise Exception("Cannot use the same Synapse terminal more than once in this command.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh1 = whichSynapseTerminal(args[0])
        synapseHigh1.rawAsynchronousMoveTo("Source high")
        synapseHigh2 = whichSynapseTerminal(args[1])
        synapseHigh2.rawAsynchronousMoveTo("Source high")
        synapseLow1 = whichSynapseTerminal(args[2])
        synapseLow1.rawAsynchronousMoveTo("Source low")
        synapseLow2 = whichSynapseTerminal(args[3])
        synapseLow2.rawAsynchronousMoveTo("Source low")
        sleep(0.2)#ensure above finished before statement below
        #configure keithley
        keithleyReset(kei2461)
        keithleySourceCurrentMode(kei2461)
        keithleySenseVoltageMode(kei2461)
        keithleyAutoRange(kei2461)
        keithleyConfigurePulse(kei2461, args[4], args[5], args[6], args[7])
        keithleyStartSweep(kei2461)
        keithleyWait(kei2461)
        sleep(0.2) #ensure above finished before statement below
       
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Pulse sweep completed."
    
    else:
        raise Exception("Number of parameters is wrong, require 6 or 8 arguments.")


from gda.jython.commands.GeneralCommands import alias       
alias('pulse') 

def synapseGround():
    '''set all the nodes to STV
    '''
    synapse_setall.rawAsynchronousMoveTo("STV")
alias("synapseGround")

def synapseOpen():
    '''set all the nodes to Open circuit
    '''
    synapse_setall.rawAsynchronousMoveTo("Open circuit")
alias("synapseOpen")
