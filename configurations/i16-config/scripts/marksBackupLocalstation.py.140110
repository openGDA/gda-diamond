from installation import isEpicsSim
from gda.device.epicsdevice import ReturnType
from gda.jython.commands.GeneralCommands import alias, run
from pd_epics import SingleEpicsPositionerSetAndGetOnlyClass

###############################################################################
# 
#   localStation.py
#
###############################################################################

print "======================================================================"
print "Running I16 specific initialisation code from localStation.py (7.8.x) :"
print "======================================================================"
import installation
installation.set(isLive=1)
#installation.set(isEpicsSim=0)
installation.setLoadOldShelf(0)

from gda.configuration.properties import LocalProperties


###############################################################################
###                 Wrap all monitors to make them simply scannable         ###
###############################################################################
from gda.device.monitor import EpicsMonitor
from scannable.MonitorWrapper import MonitorWrapper
toPrint = ''
for objname in dir():
	if isinstance(eval(objname),EpicsMonitor):
		toPrint+= objname + " "
		exec(objname + " = MonitorWrapper(" + objname + ")")
print "Wrapped the monitors: " + toPrint



###############################################################################
###             Generally useful commands, imports and constants            ###
###############################################################################

print "Importing generally useful modules"
from time import sleep
import time
from javashell import *
import java
from math import *
from Jama import Matrix

from gda.util.persistence import LocalJythonShelfManager
from gda.device.scannable import PseudoDevice
from gda.epics import CAClient

#run("pd_readSingleValueFromVectorScannable") #-->ReadSingleValueFromVectorPDClass
from pd_readSingleValueFromVectorScannable import ReadSingleValueFromVectorPDClass

print "Importing contants"
from constants import *

print "Creating dummy scannables"

#run("pd_dummy")
from pd_dummy import dummyClass
dummy = dummyClass('Dummy')
x=dummyClass('x')
y=dummyClass('y')
z=dummyClass('z')
q=dummyClass('q')
qq=dummyClass('qq')
progress=dummyClass('progress')

print "Creating time scannables"
#run("pd_time")

from pd_time import tictoc, showtimeClass, mrwolfClass, showincrementaltimeClass, waittimeClass, TimeScannable
tim = TimeScannable('Time')
showtime=showtimeClass('Showtime')
inctime=showincrementaltimeClass('inctime')
waittime=waittimeClass('Waittime')
w=waittime	#abreviated name
mrwolf=mrwolfClass('mrwolf')

sleep(1)
print "Importing useful functions"
#run("misc_functions")     #[Also includes caget, caput, cagetArray, pitchupClass]

from misc_functions import *
alias("help")
sleep(1)



print "Running startup_dataDirFunctions.py"
run('startup_dataDirFunctions')
alias('datadir')
print "  use 'datadir' to read the current directory or 'datadir name' to chnage it"

rc.setOutputFormat(['%.2f'])	#output format for ring current





###############################################################################
###                         Setup shelveIO path                             ###
###############################################################################
print "Configuring ShelveIO system"
import ShelveIO
from gda.configuration.properties import LocalProperties


shelveIoDir = LocalProperties.get("gda.config")
shelveIoDir  = shelveIoDir + "/var/oldStyleShelveIO/"
ShelveIO.ShelvePath = shelveIoDir
print "  ShelveIO path = ", shelveIoDir



###############################################################################
###                          Tune finepitch using QBPM                      ###
###############################################################################
print "Tuning finepitch using QBPM *Use with care*"
run("pitchup")
pitchup=pitchupClass()

###############################################################################
###                            Offset devices                               ###
###############################################################################
print "Running startup_offsets.py: Starting database system..."
run("startup_offsets")
print "...Database system started"
offsetshelf=LocalJythonShelfManager.open('offsets')
print "  use 'offsetshelf' to see summary of offsets"
delta_axis_offset.pil=-9.5
do=delta_axis_offset






###############################################################################
###                         Vortex detector chain                           ###
###############################################################################

#print "Creating Vortex detector chain scannables"

#vortexName = "epicsMca01"
#print "creating Vortex objects for ", vortexName
#import mca_utils
#reload(mca_utils)

#vortexName = "epicsMca02"
#print "creating Vortex objects for ", vortexName
#import mca_utils
#reload(mca_utils)

#mca=finder.find(vortexName)
#if (mca != None):
#	ctmca=mca_utils.ctmcaClass('ctmca',mca)
#	rdmca=mca_utils.rdmcaClass('rdmca',mca)
#	mcaROI1=mca_utils.rdROIClass('rdROI1',mca,910,917)
#	mcaROI2=mca_utils.rdROIClass('rdROI2',mca,913,914)
#	mcaSca1 = mca_utils.rdScaClass('mcaSca1',mca,910,917)
#	mcaSca2 = mca_utils.rdScaClass('mcaSca2',mca,913,914)


###############################################################################
###                   Create OD current amplifier devices                   ###
###############################################################################
print "Creating OD current amplifier monitors"
run("startup_currents")
run("startup_currents2")
sleep(1)





###############################################################################
###                       Create epics devices/monitors                     ###
###############################################################################
print "Creating epics device classes"
run("pd_epics") #--> DisplayEpicsPVClass, SingleEpicsPositionerClass, SingleEpicsPositionerNoStatusClass, SingleEpicsPositionerSetAndGetOnlyClass, Epics_Shutter, SingleEpicsPositionerNoStatusClass2, Epics_Shutter


if installation.isLive():

	print "   running startup_epics_monitors.py"      # [TODO: Replace with imports]
	run("startup_epics_monitors")

	print "   running startup_epics_positioners.py"
	run("startup_epics_positioners")

	print "   running startup_cryocooler.py"          #[NOTE: Also creates commands]
	run("startup_cryocooler")

	print "   running pd_femto_adc_current2.py"
	run("pd_femto_adc_current2.py")
	
	print "   running pd_xyslit.py"
	run("pd_xyslit.py")


else:
	print "NOT LIVE :SKIPPED EPICS DEVICES/MONITORS"
	print "      Creating dummy bragg motor should be on PV:BL16I-MO-DCM-01:BRMTR:MOT.RBV"
	bragg = dummyClass('bragg')
	bragg.asynchronousMoveTo(-23.2997)
	print "      Creating dummy perp motor should be on PV:BL16I-MO-DCM-01:FPMTR:PREAD"
	perp = dummyClass('perp')
	bragg.asynchronousMoveTo(0.033523)

# [TODO: Move some into server.xml]
# [TODO: Separate out class for calling linux scripts]
import beamline_info as BLi #contains energy and wavelength
print "   creating shutter scannable"
shutter= Epics_Shutter('shutter','BL16I-PS-SHTR-01:CON')
	

	
print "   creating ion pump scannables"
run("pd_ionpump")
run("startup_ionpumps")


###############################################################################
###                           Energy scannable                              ###
###############################################################################
#print "Creating energy pseudo device..."
#import energyPseudoDevice
#reload(energyPseudoDevice)
#energy = energyPseudoDevice.energyPseudoDevice("energy",BLi)

###############################################################################
###                        	        Energy                                  ###
###############################################################################
run("startup_energy_related")


###############################################################################
###                        	 Diffractometer and hkl                         ###
###############################################################################

run("startup_diffractometer_related")    # <-- The old well used one
#run("startup_diffractometer_related_DEV")# <-- The new less well used one
hkl.setLevel(6)

###############################################################################


###############################################################################
###                        Serial devices: Ace, X2000                        ###
###############################################################################
if installation.isLive():
	print "Creating raw serial devices for x2000 and Ace cards"
	run("device_serial")          #--> DeviceSerial
	run("device_serial_x2000")    #--> x2000Class
	run("device_serial_ace")      #--> ace
	#Scintillator=SerialDevice("BL16I-EA-DET-03:asyn"):
	x2000dict={'gain' : ":INP0:GAIN",'reset':"*RST0",'scaupp' : ":SENS0:SCA:UPP", 'scalow' : ":SENS0:SCA:LOW",'pkt' : ":SENS0:PKT",'volt' : ":SOUR0:VOLT",'sat' : ":SENS0:SAT",'fail' : ":SENS0:HVFAIL"}
	acedict = {'reset':"RESET",'ver':"VER",'help':"HELP",'tlvl':"TLVL",'sout':"SOUT",'sca':"SCA",'alcur':"ALCURR",'alarm':"ALARM",'hcurr':"HCURR",'scaps':"OUT",'hvolt':"HVOLT",'hvmon':"HVMON",'info':"INFO",'ht':"HTEMP"}
	#x2000=x2000("BL16I-EA-DET-03:asyn","\\006",x2000dict)
	x2003=x2000class("BL16I-EA-DET-03:asyn","\\006",x2000dict)
	x2000=x2000class("BL16I-EA-DET-05:asyn","\\006",x2000dict)
	#x2000_1=x2000("BL16I-EA-DET-03:asyn","\\006",x2000dict)
	#x2000_2=x2000("BL16I-EA-DET-03:asyn","\\006",x2000dict)
	ace=ace("BL16I-EA-DET-04:asyn",acedict)		
	print "Creating x2000sca & x2003 scannables"
	run("pd_x2000")
	x2000sca=x2000scaClass('X2000 sca1',"%4.3f",x2000,"cts")
	# this one takes [low width]
	x2003sca=x2000scaClass('X2003 sca1',"%4.3f",x2003,"cts")
	# this one takes [low high]
	#x2000sca1=x2000sca('X2000 sca1',"%4.3f",x2000_1,"cts")
	#x2000sca2=x2000sca('X2000 sca2',"%4.3f",x2000_2,"cts")

	print "Creating Ace scannable: acesca"
	run("pd_acescaler")
	acesca=acesca1('APDsca',"%4.3f",ace,"V")		
	#run("pd_acehead")  
	#Thead=acehead1('Thead',"%4.3f",ace,"C")

	
###############################################################################
###                          Struck counter timer                           ###
###############################################################################
print "Creating struck counter/timer scannables: ct1-ct11"
run("pd_struck")
if installation.isLive():
	ct1=Struck('ct1',"BL16I-EA-DET-01:SCALER",1,"%.0f")
	ct2=Struck('ct2',"BL16I-EA-DET-01:SCALER",2,"%.0f")		
	ct3=Struck('ct3',"BL16I-EA-DET-01:SCALER",3,"%.0f")
	ct4=Struck('ct4',"BL16I-EA-DET-01:SCALER",4,"%.0f")
	ct5=Struck('ct5',"BL16I-EA-DET-01:SCALER",5,"%.0f")
	ct6=Struck('ct6',"BL16I-EA-DET-01:SCALER",6,"%.0f")
	#
	#
	ct9=Struck('ct9',"BL16I-EA-DET-01:SCALER",9,"%.0f")		
	ct10=Struck('ct10',"BL16I-EA-DET-01:SCALER",10,"%.0f")


###############################################################################
###                             Positioners                                 ###
###############################################################################

print 'Creating positioners with preset values: mono_screens, mono_diode'
run("pd_MoveScalarPDsToPresetValues")      # -->MoveScalarPDsToPresetValuesClass
mono_screens=MoveScalarPDsToPresetValuesClass('mono_screens',[d3a,d3d,d4a,d4d,d5a,d5d],[[90,33,20,33,20,35],[60,0,20,0,20,0]],help='0=all out; 1=fluo foils and d3a Al in, rest out')
mono_diode=MoveScalarPDsToPresetValuesClass('mono_diodes',[d3a,d3d,d4a,d4d,d5a,d5d],[[90,33,20,33,20,35],[90,76.3,20,33,20,35],[90,33,20,75.5,20,35],[90,33,20,33,20,76.5]],help='0=all out; 1=d3d diode in, 2=d4d diode in; 3=d5diode in')

###############################################################################
###                      Preset scannable positions                         ###
###############################################################################
print "Moving some scannables to preset positions (running startup_motorvals.py)"
run("startup_motorvals")


###############################################################################
###                                 QBPM                                    ###
###############################################################################
print "Creating QBPM scannables"
run("pd_qbpm")
qbpm1=EPICSODQBPMClass('QBPM1','BL16I-DI-IAMP-01',help='Current amp in optics hutch\nc1: White beam diode\nc2: broken\nc3: d3d diode\nc4: d4d diode')
qbpm7=EPICSODQBPMClass('QBPM7','BL16I-DI-IAMP-07',help='Current amp1 in experimental hutch\nc1: S5 diagnostic diode\nc2-4: not used')
qbpm6=EPICSODQBPMClass('QBPM6','BL16I-DI-IAMP-06',help='Current amp for QBPM in experimental hutch')
pmon=qbpm8=EPICSODQBPMClass2('QBPM8','BL16I-DI-IAMP-08',help='Current amp for polarimeter QBPM in experimental hutch')

vpos=ReadSingleValueFromVectorPDClass(qbpm6,6,'vpos','%.4f',help='qbpm vertical position (Y)')
hpos=ReadSingleValueFromVectorPDClass(qbpm6,5,'hpos','%.4f',help='qbpm horizontal position (X)')

###############################################################################
###                             Attenuator                                  ###
###############################################################################
print "Creating attenuator scannable"

print "   loading library of elements"
from element_library import *

print "   creating foil inserter scannables"
from pd_foilinserter import Foilinserter
Al10u=Foilinserter('Al10u',"BL16I-OP-ATTN-04:F1TRIGGER","BL16I-OP-ATTN-04:F1STATE",AlBulk,10)#,0.82674)
Al20u=Foilinserter('Al20u',"BL16I-OP-ATTN-04:F2TRIGGER","BL16I-OP-ATTN-04:F2STATE",AlBulk,20)#,0.68349)
Al40u=Foilinserter('Al40u',"BL16I-OP-ATTN-04:F3TRIGGER","BL16I-OP-ATTN-04:F3STATE",AlBulk,40)#,0.46716)
Al75u=Foilinserter('Al75u',"BL16I-OP-ATTN-04:F4TRIGGER","BL16I-OP-ATTN-04:F4STATE",AlBulk,75)#,0.24002)
Al150u=Foilinserter('Al150u',"BL16I-OP-ATTN-03:F1TRIGGER","BL16I-OP-ATTN-03:F1STATE",AlBulk,150)#5.76114e-2)
Al300u=Foilinserter('Al300u' , "BL16I-OP-ATTN-03:F2TRIGGER","BL16I-OP-ATTN-03:F2STATE",AlBulk,300)#3.31907e-3)
Al500u=Foilinserter('Al500u',"BL16I-OP-ATTN-03:F3TRIGGER","BL16I-OP-ATTN-03:F3STATE",AlBulk,500)#7.38516e-5)
Pb100u=Foilinserter('Pb100u',"BL16I-OP-ATTN-03:F4TRIGGER","BL16I-OP-ATTN-03:F4STATE",PbBulk,100)#1.41623e-16)
Pb0=Foilinserter('Pb100u',"BL16I-OP-ATTN-03:F4TRIGGER","BL16I-OP-ATTN-03:F4STATE",PbBulk,0)
Al75u0=Foilinserter('Al75u',"BL16I-OP-ATTN-04:F4TRIGGER","BL16I-OP-ATTN-04:F4STATE",AlBulk,0)

print "   creating attenuator scannable: atten"

from pd_attenuator import Atten
atten = Atten('Attenuator',[Al10u,Al20u,Al40u,Al75u,Al150u,Al300u,Al500u,Pb100u])
#atten = Atten('Attenuator',[Al10u,Al20u,Al40u,Al75u,Al150u,Al300u,Al500u,Pb0])
#atten = Atten('Attenuator',[Al10u,Al20u,Al40u,Al75u0,Al150u,Al300u,Al500u,Pb100u])

###############################################################################
###                             Tweak scannables                            ###
###############################################################################
# TODO: Try to move to end. Does anythin later depend on these new names

print "Hacking some scannables' InputName arrays"
eta.setInputNames(['eta'])
chi.setInputNames(['chi'])
phi.setInputNames(['phi'])
psi.setInputNames(['psi'])
psic.setInputNames(['psic'])
if installation.isLive():
	ct3.setInputNames(['ct3'])
	ct9.setInputNames(['ct9'])
#adc2.setInputNames(['adc2'])
#adc4.setInputNames(['adc4'])
#adc6.setInputNames(['adc6'])
#adc2.setName('adc2')
#adc4.setName('adc4'); #IC0
#adc6.setName('adc6'); #IC1

print "Changing some scannables' output formats"
eta.setOutputFormat(['%.4f'])
delta.setOutputFormat(['%.4f'])

try:
	finder.find('mu_motor').setSpeed(1.0)
	finder.find('gamma_motor').setSpeed(2.0)
except:
	print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Could not set speend on mu or gamma - probably disconnected !!!!!!!!!!!!!!"

delta.setOutputFormat(['%.5f'])
gam.setOutputFormat(['%.5f'])
rc.setOutputFormat(['%.4f'])

###############################################################################
###                          Polarisation Analyser                          ###
###############################################################################
print "Creating polarisation analyser scannable: pol"
run("pd_polarizationAnalyser") # --> PolarizationAnalyser
if installation.isLive():
	pol=PolarizationAnalyser("Polarization Analyser",stoke,thp,tthp,zp,thp_offset,thp_offset_sigma,thp_offset_pi,tthp_offset,tthp_detoffset,cry_offset,ref_offset)

###############################################################################
###                                    TCA                                  ###
###############################################################################
print "Creating TCA scanables"
run("device_tca") #--> TCA
tca=TCA('BL16I-EA-DET-01:tca1')

run("pd_tca") #--> tcssca
tcasca1=tcasca('TCAsca1',"%4.3f",tca,"%",'1')
tcasca2=tcasca('TCAsca2',"%4.3f",tca,"%",'2')
tcasca3=tcasca('TCAsca3',"%4.3f",tca,"%",'3')  


###############################################################################
###                                    MCA                                  ###
###############################################################################
print "Creating MCA scannables: mca1, mca"

run("pd_mcachannel") #--> McaChannel
run("pd_mca") #--> Mca
if installation.isLive():
	mca1=Mca('MCA1','BL16I-EA-DET-01:aim_adc1')
	mca2=Mca('MCA2','BL16I-EA-DET-02:aim_adc1')

###############################################################################
###                                   LS340                                 ###
###############################################################################
print "Creating LS340 scannables"
run("pd_LS340readback") #--> DisplayEpicsPVClassLS
run("pd_LS340control")  #--> EpicsLScontrol	
run("pd_LS340setpoint")
run("pd_LakeshorePID")

if installation.isLive():
	Treg=DisplayEpicsPVClassLS('T1',"BL16I-EA-LS340-01:",'K','%7f','0',7)
	Tsam=DisplayEpicsPVClassLS('T1',"BL16I-EA-LS340-01:",'K','%7f','1',8)
	tset=EpicsLScontrol('tset','BL16I-EA-LS340-01:','K','%5.2f','0','1')
	T1=EpicsLSsetpoint('Tset1','SETP? 1','SETP 1','K','%5.2f')
	T2=EpicsLSsetpoint('Tset2','SETP? 2','SETP 2','K','%5.2f')
	Ta=DisplayEpicsPVClassLS('Ta_diode',"BL16I-EA-LS340-01:",'K','%4f','0',8); Ta.setInputNames(['Ta'])
	Tb=DisplayEpicsPVClassLS('Tb_Pt',"BL16I-EA-LS340-01:",'K','%4f','1',8); Tb.setInputNames(['Tb'])
	Tc=DisplayEpicsPVClassLS('Tc_TCtypeE',"BL16I-EA-LS340-01:",'K','%4f','2',8); Tc.setInputNames(['Tc'])
	Td=DisplayEpicsPVClassLS('Td_TCAuFe',"BL16I-EA-LS340-01:",'K','%4f','3',8); Td.setInputNames(['Td'])
	
	Ta2=DisplayEpicsPVClassLS2('Ta2',"BL16I-EA-LS340-01:",'K','%4f','0',8); Ta2.setInputNames(['Tas']);
	Tb2=DisplayEpicsPVClassLS2('Tb2',"BL16I-EA-LS340-01:",'K','%4f','1',8); Tb2.setInputNames(['Tbs']);
	Tc2=DisplayEpicsPVClassLS2('Tc2',"BL16I-EA-LS340-01:",'K','%4f','2',8); Tc2.setInputNames(['Tcs']);
	Td2=DisplayEpicsPVClassLS2('Td2',"BL16I-EA-LS340-01:",'K','%4f','3',8); Td2.setInputNames(['Tds']);
	#Tcs=DisplayEpicsPVClassLS('Tc_TCtypeE',"BL16I-EA-LS340-01:",'K','%4f','2',8); Tc.setInputNames(['Tcs'])
	#Tds=DisplayEpicsPVClassLS('Td_TCAuFe',"BL16I-EA-LS340-01:",'K','%4f','3',8); Td.setInputNames(['Tds'])




	LSP=SingleEpicsPositionerSetAndGetOnlyClass('LS_P','BL16I-EA-LS340-01:P_S','BL16I-EA-LS340-01:P','P','%4f')
	LSI=SingleEpicsPositionerSetAndGetOnlyClass('LS_I','BL16I-EA-LS340-01:I_S','BL16I-EA-LS340-01:I','I','%4f')
	LSD=SingleEpicsPositionerSetAndGetOnlyClass('LS_D','BL16I-EA-LS340-01:D_S','BL16I-EA-LS340-01:D','D','%4f')
	#LSPID=ReadPDGroupClass('LS_PID',[LSP,LSI,LSD])
	pid1=EpicsLakeshorePID('PID_1','PID? 1','PID 1','','%4f')
	pid2=EpicsLakeshorePID('PID_2','PID? 2','PID 2','','%4f')


###############################################################################
###                                 Analysis                                ###
###############################################################################
print "Importing analysis commands (peak, centroid & peak optimisation)"
run("analysis_FindScanPeak")  #--> FindScanPeak command
peak=FindScanPeak
run("analysis_FindScanCentroid") #--> FindScanCentroid, findCentroidPoint, readSRSDataFile commands
cen=FindScanCentroid
if installation.isLive():
	run("OptimizePeak") #--> ptimizePeak, OP2, OP3 commands

	
#run FindScanPitch.py


###############################################################################
###                           Set default scannables                        ###
###############################################################################

#remove_default cryolevel; add_default cryolevel
#remove_default adc4; add_default adc4 
#remove_default adc6; add_default adc6
#remove_default te; add_default te 
#remove_default Ta; add_default Ta 
#remove_default Tb; add_default Tb 
#remove_default Tc; add_default Tc 
#remove_default Td; add_default Td


###############################################################################
###                          Wait for beam scannables                       ###
###############################################################################
print "Creating checkbeam scannables"
run("pd_WaitForBeam")  #--> WaitForBeamPDClass
if installation.isLive():
	checkbeamcurrent=WaitForBeamPDClass('BeamOK',rc,10)
	checkbeam=WaitForBeamPDClass('BeamOK',ic1,1)
	timetoinjection=TimeToMachineInjectionClass('TimeToInjection','SR-CS-FILL-01:COUNTDOWN', 'sec', '%.1f')
	waitforinjection=WaitForInjectionPDClass('WaitForInjection',timetoinjection, 5, 5)




###############################################################################
###                            PD from function	(alpha, beta)	            ###
###############################################################################
run('PDFromFunctionClass')
###############################################################################
###############################################################################
###                             Xtalinfo
###############################################################################
run("pd_crystal_info")
xtalinfo=crystalinfo('xtal','A','%7.5f',ub,cr)
print "creating crystal info"
###############################################################################
###                           Misc PD's                                     ###
###############################################################################
run('pd_misc')
###############################################################################
###############################################################################
###                                Metadata                                 ###
###############################################################################
print "Configuring metadata capture"
run("pd_metadata") #--> MetaDataPD
run("pd_metadata_group") #--> ReadPDGroupClass

if installation.isLive():
# removed from the metadata to test LS on 26/08/08
# please put back!
	d=diffractometer_sample=ReadPDGroupClass('diffractometer_sample',[delta, eta, chi, phi, gam, mu, hkl, psi, en, kphi, azihkl, alpha, beta, delta_axis_offset])
	xtal_info=ReadPDGroupClass('xtal_info',[xtalinfo])
	source=ReadPDGroupClass('source',[rc, idgap, uharmonic])
	beamline_slits=ReadPDGroupClass('beamline_slits',[s1xcentre,s1xgap,s1ycentre, s1ygap,s2xcentre,s2xgap,s2ycentre, s2ygap,s3xcentre,s3xgap,s3ycentre, s3ygap,s4xcentre,s4xgap,s4ycentre, s4ygap])
	jjslits=ReadPDGroupClass('beamline_slits',[s5xgap, s5xtrans, s5ygap, s5ytrans, s6xgap, s6xtrans, s6ygap, s6ytrans])
	mirror1=ReadPDGroupClass('mirror1',[m1pitch, m1x, m1y, m1roll, m1yaw])
	mirror2=ReadPDGroupClass('mirror2',[m2pitch, m2x, m2y, m2roll, m2yaw,m2bender])
	mirrors=ReadPDGroupClass('mirrors',[mirror1, mirror2])
	mono=ReadPDGroupClass('Mono',[en,bragg,pitch, finepitch, perp, dcmlat,showroll1, showroll2,T1dcm, T2dcm,cryolevel])
	pa=ReadPDGroupClass('PA',[stoke, tthp, thp, zp])
	pp=ReadPDGroupClass('PP',[ppth, ppx, ppy, ppchi])
	positions=ReadPDGroupClass('positions',[sx,sy,sz,base_y,base_z,ytable, ztable])
	xps2=ReadPDGroupClass('xps2',[gam,delta,mu,kth,kap,kphi])
	xps3=ReadPDGroupClass('xps3',[xps3m1, xps3m2, xps3m3, xps3m4])
	frontend=ReadPDGroupClass('frontend',[frontendx, frontendy])
	gains_atten=ReadPDGroupClass('gains_atten',[atten, diode.gain, ic1.gain, ic2.gain])
	lakeshore=ReadPDGroupClass('lakeshore',[tset,Ta,Tb,Tc,Td])
	minimirrors=ReadPDGroupClass('minimirrors',[m3x, m4x, m3pitch, m4pitch])
	pdlist=ReadPDGroupClass('small_list',[diffractometer_sample,xtalinfo,source, jjslits, pa, pp, positions, gains_atten, mirrors,minimirrors, beamline_slits, mono, frontend, lakeshore])
#	pdlist=ReadPDGroupClass('small_list',[source, jjslits, pa, pp, positions, gains_atten, mirrors,beamline_slits, mono, frontend])
	mds=MetaDataPD("mds", [mrwolf, pdlist]) 
	add_default(mds)


###############################################################################
###                      Monitor kth, delta, kappa ???                      ###
###############################################################################
print "Creating more scannables to monitor kth, delta and kap."
kthshow=ReadPDGroupClass('kthshow',[kth]); kthshow.setLevel(8); #kthshow.setExtraNames(['kthshow']);kthshow.setOutputFormat(['%.6f'])
delshow=ReadPDGroupClass('delshow',[delta]); delshow.setLevel(8); #delshow.setExtraNames(['delshow']);delshow.setOutputFormat(['%.6f'])
kapshow=ReadPDGroupClass('kapshow',[kap]); kapshow.setLevel(8); #kapshow.setExtraNames(['kapshow']);kapshow.setOutputFormat(['%.6f'])


###############################################################################
###                              Set user limits                            ###
###############################################################################
print "Setting user limits (running ConfigureLimits.py)"
run("ConfigureLimits")


###############################################################################
###                             Configure Pilatus                           ###
###############################################################################

## (oldone) print "Configuring pilatus system (running Pilatus.py)"
## (oldone) if installation.isLive():
## (oldone) 	run("Pilatus2")

from gdascripts.scannable.detector.epics.EpicsPilatus import EpicsPilatus

from gdascripts.scannable.detector.ProcessingDetectorWrapper import ProcessingDetectorWrapper, BodgedProcessingDetectorWrapper, BodgedProcessingDetectorWrapperWithRobustLoading
from gdascripts.scannable.detector.DetectorDataProcessor import DetectorDataProcessor, DetectorDataProcessorWithRoi
from gdascripts.analysis.datasetprocessor.twod.TwodGaussianPeak import TwodGaussianPeak
from gdascripts.analysis.datasetprocessor.twod.SumMaxPositionAndValue import SumMaxPositionAndValue
from gda.analysis.io import PilatusLoader, PilatusTiffLoader

# 2m
pil2mdet = EpicsPilatus('pil2mdet', 'BL16I-EA-PILAT-02:','/dls/i16/detectors/im/','test','%s%s%d.tif')
pil2m = BodgedProcessingDetectorWrapperWithRobustLoading('pil2m', pil2mdet, 10, [], panel_name='Pilatus2M', toreplace=None, replacement=None, iFileLoader=PilatusTiffLoader)
pil2m.processors=[DetectorDataProcessorWithRoi('max', pil2m, [SumMaxPositionAndValue()], False)]
pil2m.printNfsTimes = True
pil2m.display_image = True

#100k
pil100kdet = EpicsPilatus('pil100kdet', 'BL16I-EA-PILAT-01:','/dls/i16/detectors/im/','test','%s%s%d.tif')
pil100k = BodgedProcessingDetectorWrapperWithRobustLoading('pil100k', pil100kdet, 10, [], panel_name='Pilatus100k', toreplace=None, replacement=None, iFileLoader=PilatusTiffLoader)
pil100k.processors=[DetectorDataProcessorWithRoi('max', pil100k, [SumMaxPositionAndValue()], False)]
pil100k.printNfsTimes = True

pil100kvrf=SingleEpicsPositionerSetAndGetOnlyClass('P100k_VRF','BL16I-EA-PILAT-01:VRF','BL16I-EA-PILAT-01:VRF','V','%.3f',help='set VRF (gain) for pilatus\nReturns set value rather than true readback\n-0.05=very high\n-0.15=high\n-0.2=med\n-0.3=low')
pil100kvcmp=SingleEpicsPositionerSetAndGetOnlyClass('P100k_VCMP','BL16I-EA-PILAT-01:VCMP','BL16I-EA-PILAT-01:VCMP','V','%.3f',help='set VCMP (threshold) for pilatus\nReturns set value rather than true readback\n0-1 V')
pil100kgain=SingleEpicsPositionerSetAndGetOnlyClass('P100k_gain','BL16I-EA-PILAT-01:Gain','BL16I-EA-PILAT-01:Gain','','%.3f',help='set gain for pilatus\nReturns set value rather than true readback\n3=very high\n2=high\n1=med\n0=low')
pil100kthresh=SingleEpicsPositionerSetAndGetOnlyClass('P100k_threshold','BL16I-EA-PILAT-01:ThresholdEnergy','BL16I-EA-PILAT-01:ThresholdEnergy','','%.0f',help='set energy threshold for pilatus (eV)\nReturns set value rather than true readback')

pil = pil100k


###############################################################################
###                           Theta with offset eta                         ###
###############################################################################
print "Creating scannarcbles with offsets(th is eta with offset eta_offset"
run("pd_offsetAxis") #--> OffsetAxisClass
# e.g. th is eta with eta_off as offset
th=OffsetAxisClass('th',eta,eta_offset,help='eta device with offset given by eta_offset. Use pos eta_offset to change offset')

###############################################################################
###                           P/A detector angles                           ###
###############################################################################
if installation.isLive():
	#tthp.apd=-1.5#27/11/08
	tthp.apd = 2.6 #04/02/09
	#tthp.diode=53.75#temp value
	tthp.diode=54.75#centre 16/9/09
	#tthp.camera=30
	tthp.camera=34.2 #02/02/09
	tthp.vortex=-14.8 #11/9/09
	tthp.ccd=70
###############################################################################
###                           Run centred scan function (experimental!)     ###
###############################################################################
#run("centred_scan_function")## replaced by scan_wrappers

###                                     DONE!                               ###
print "Done!"
print "======================================================================"
import gda.data.PathConstructor
print "Current data directory: ", gda.data.PathConstructor.createFromProperty("gda.data.scan.datawriter.datadir")
print "======================================================================"

print "creating new Stuck counter-timet object, t    Type help t"
run("pd_struck2")
if installation.isLive():
	t=Struck2('t',"BL16I-EA-DET-01:SCALER",[3])
	t.setname(3,'APD'); t.setname(4,'Scintillator1'); t.setname(5,'Scintillator2'); t.setname(9,'SCA1'); t.setname(10,'SCA2'); t.setname(11,'SCA3');

###############################################################################
###                           Help for spec users                           ###
###############################################################################
run("spechelp")

###############################################################################
###                           Defaults - keep at end                        ###
###############################################################################
if installation.isLive():
	add_default(ic1) 
	add_default(rc)
#add_default checkbeam

###############################################################################
###                         Experimental femto/adc class delete if problem  ###
###############################################################################
#if installation.isLive():
#	del diode; 
#	run('pd_femto_adc_current')
#	diode=pd_femto_adc_current('diode','BL16I-EA-USER-01:AI1AV','BL16I-DI-FEMTO-03:GAIN',-1e6,'microamps','%.6f')

###############################################################################
###                         Experimental Keithley 2410 class delete if problem  ###
###############################################################################
#del hv;
# Connect to X29 on front panel
if installation.isLive():
	run('pd_hvunit_K2410')
	hv=hvunit_K2410('hv','BL16I-EA-K2400-01:','V','%5.3e')
	
###############################################################################
###                           Wait for injection - experimental             ###
###############################################################################
if installation.isLive():
	add_default waitforinjection
	waitforinjection.due=5	#wait for injection if due in this period of time (sec)
#	waitforwait this time (sec) after injection

###############################################################################
###                           Phase plate devices                           ###
###############################################################################
run('PhasePlateClass')

###############################################################################
###                           Experimental ascan, dscan, cs with maxval  ###
###############################################################################
run('scan_wrappers')
###############################################################################
###############################################################################
###                           spara sperp PD's  ###
###############################################################################
run('Sample_perpMotion')
###############################################################################

###############################################################################
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

# Set the data directory here (aliased command won't yet work):
#datadir("/dls/i16/data/2009/mt1008-1")
#datadir("/dls/i16/data/2009/mt973-1") # also sets the pilatus directories
#datadir("/dls/i16/data/2009/mt0/run7")#commissioning (user new run each commissioing run)
#datadir("/dls/i16/data/2009/mt1803-1")
#datadir('/dls/i16/data/2009/in1889-1')
#datadir("/dls/i16/data/2010/mt0/run1")
datadir("/dls/i16/data/2010/mt1633-1")


energy.getPosition()
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
###############################################################################

###############################################################################
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#Object to allow easy acces to any Epics Channels
#e.g.
#from gda.device.epicsdevice import ReturnType
#data = beamline.getValue(ReturnType.DBR_NATIVE,"","-EA-DET-01:MCA-01:mca3")
beamline = finder.find("Beamline")
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
###############################################################################
###############################################################################
###                            counter timer with fast shutter              ###
###############################################################################
run('Struck_with_fastshutter')
###############################################################################
###############################################################################
run('FlipperClass')
###############################################################################

###############################################################################
###                                 Continous scan                          ###
###############################################################################
# follow instructions from wiki on continuous scanning
###############################################################################
###temporary fix for chi flag problem
run('pd_clearChiFlag')
add_default(clearchiflagpd)
###############################################################################

from scan.continuous import cvscan as cvscan_module
from scan.continuous import mcsWrapper
exec('cvscan=cvscan_module.Cvscan()')
alias('cvscan')
 

mcsw=mcsWrapper.McsWrapper('mcsw', mcs, [2,3,4],['ch2','ch3','ch4'])
# To use:
# cvscan kth start stop step mcsw time_per_bin

#ADC optics table XMAP
run('pd_adc_table')

#experimental PV for XMAP
run('xmap_classes')
#(top right, bottom left)
roi1 = DetectorDataProcessorWithRoi('roi1', pil, [SumMaxPositionAndValue()])
roi1.setRoi(219,75,275,115)

roi2 = DetectorDataProcessorWithRoi('roi2', pil, [SumMaxPositionAndValue()])
#roi2.setRoi(262,100,253,110)
roi2.setRoi(263,95,250,110)

# Refl beam ROI
#roiR = DetectorDataProcessorWithRoi('roiR', pil, [SumMaxPositionAndValue()])
#roiR.setRoi(1342, 1425, 1354, 1434)

# Dir beam ROI
#roiD = DetectorDataProcessorWithRoi('roiD', pil, [SumMaxPositionAndValue()])
#roiD.setRoi(1342, 1430, 1354, 1438)

roi2m1= DetectorDataProcessorWithRoi('roi2m1', pil2m, [SumMaxPositionAndValue()])
roi2m1.setRoi(1300,1438,1318,1444)

roi3 = DetectorDataProcessorWithRoi('roi3', pil, [SumMaxPositionAndValue()])
roi3.setRoi(229,60,300,140)
