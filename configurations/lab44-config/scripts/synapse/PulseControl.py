'''
define 'pulse' command for controlling pulse sweep through a sample via Synapse switch box using signals from keithley 2461

Created on 9 Nov 2018

@author: fy65
'''
from synapse.SynapseSwitchBox import synapse_s1, synapse_s2, synapse_s3, synapse_s4, synapse_setall,\
    synapse_cg
from time import sleep
from synapse.keithley_class import Keithley2461
from gda.jython.commands.GeneralCommands import alias  

KEITHLEY_IP_ADDRESS="10.106.8.8"
KEITHLEY_SOCKET_PORT=5025
KEITHLEY_COMMAND_TERMINATOR='\n'

def whichSynapseTerminal(arg):
    if arg == 1:
        synapse = synapse_s1
    elif arg == 2:
        synapse = synapse_s2
    elif arg == 3:
        synapse = synapse_s3
    elif arg == 4:
        synapse = synapse_s4
    else:
        raise Exception("First input must be in [1,2,3,4]")
    return synapse

def generatePulseFromKeithley(pulseLevel, pulseWidth, timeDelay, numberOfPulses):
    try:
        keithley = Keithley2461("keithley", KEITHLEY_IP_ADDRESS, KEITHLEY_SOCKET_PORT, KEITHLEY_COMMAND_TERMINATOR)
        keithley.communicator.configure()
        keithley.reset()
        keithley.sourceFunction('CURR')
        keithley.senseFunction('VOLT')
        keithley.senseAutoRange('VOLT', 'ON')
        keithley.sourcePulseTrain('CURR', pulseLevel, pulseWidth, numberOfPulses, 'OFF', timeDelay)
        keithley.startPulse()
        keithley.wait()
        print "sleep %f" % ((pulseWidth+timeDelay)*numberOfPulses*3+0.1)
        sleep((pulseWidth+timeDelay)*numberOfPulses*3+0.1)
        keithley.closeConnection()
    except Exception as e:
        raise e
    finally:
        if not Keithley2461.isConnectionClosed():
            keithley.closeConnection()

def pulse2(*args):
    ''' send pulse sweep generated by Keithley 2461 to the sample using 2 contact points via Synapse Switch Box.
    This command takes only 6 input parameters:
        The first 2 parameters defines the contact points in the Synapse Switch Box;
        The last 4 parameters defines pulse sweep to be generated by the Keithley 2461.
    Command syntax:
        pulse source_high source_low current width timeDelay numberOfPulses
    '''
    if len(args) == 6:
        if args[0]==args[1]:
            raise Exception("Cannot use the same Synapse terminal for both high and low.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh = whichSynapseTerminal(args[0])
        synapseHigh.rawAsynchronousMoveTo("Source high")
        synapseLow = whichSynapseTerminal(args[1])
        synapseLow.rawAsynchronousMoveTo("Source low")
        sleep(1) #ensure above finished before statement below 
        
        generatePulseFromKeithley(args[2], args[3], args[4]/2, args[5])
        
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Pulse sweep completed."  
    else:
        raise Exception("Number of parameters is wrong, require 6 arguments.")
         
alias('pulse2') 

def pulse4(*args):
    ''' send pulse sweep generated by Keithley 2461 to the sample using 4 contact points via Synapse Switch Box.
    This command takes only 8 input parameters:
        The first 4 parameters defines the contact points in the Synapse Switch Box;
        The last 4 parameters defines pulse sweep to be generated by the Keithley 2461.
    Command syntax:
        pulse source_1_high  source_2_high source_1_low source_2_low current width timeDelay  numberOfPulses
    '''
    if len(args)== 8:
        if len(args[:4])!=len(set(args[:4])):
            raise Exception("Cannot use the same Synapse terminal more than once in this command.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh1 = whichSynapseTerminal(args[0])
        synapseHigh1.rawAsynchronousMoveTo("Source high")
        synapseHigh2 = whichSynapseTerminal(args[1])
        synapseHigh2.rawAsynchronousMoveTo("Source high")
        synapseLow1 = whichSynapseTerminal(args[2])
        synapseLow1.rawAsynchronousMoveTo("Source low")
        synapseLow2 = whichSynapseTerminal(args[3])
        synapseLow2.rawAsynchronousMoveTo("Source low")
        sleep(1)#ensure above finished before statement below

        generatePulseFromKeithley(args[4], args[5], args[6]/2, args[7])
       
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Pulse sweep completed."
    
    else:
        raise Exception("Number of parameters is wrong, require 6 or 8 arguments.")

alias('pulse4') 

def generatePulseAndMeasureFromKeithley(pulseLevel, pulseWidth, timeDelay, numberOfPulses, nplc):
    try:
        keithley = Keithley2461("keithley", KEITHLEY_IP_ADDRESS, KEITHLEY_SOCKET_PORT, KEITHLEY_COMMAND_TERMINATOR)
        keithley.communicator.configure()
        keithley.reset()
        keithley.sourceFunction('CURR')
        keithley.senseFunction('VOLT')
        keithley.senseFunctionNPLC('VOLT', nplc )
        keithley.senseAutoRange('VOLT', 'ON')
        keithley.sourcePulseTrain('CURR', pulseLevel, pulseWidth, numberOfPulses, 'ON', timeDelay)
        keithley.startPulse()
        keithley.wait()
        print "sleep %f" % ((pulseWidth+timeDelay)*numberOfPulses*3+0.1)
        sleep((pulseWidth+timeDelay)*numberOfPulses*3+0.1)
        data=keithley.readTraceData(numberOfPulses)
        keithley.closeConnection()
        return data
    except Exception as e:
        raise e
    finally:
        if not Keithley2461.isConnectionClosed():
            keithley.closeConnection()
        
def pulseAndMeas2(*args):
    ''' send pulse sweep generated by Keithley 2461 to the sample using 2 contact points via Synapse Switch Box, and return the measured data.
    This command takes only 7 input parameters:
        The first 2 parameters defines the contact points in the Synapse Switch Box;
        The next 4 parameters defines pulse sweep to be generated by the Keithley 2461.
        The last parameter defines NPLC (must be between 0.01 and 10)
    Command syntax:
        pulseAndMeas source_high source_low current width timeDelay numberOfPulses nplc
    '''
    if len(args) == 7:
        if args[0]==args[1]:
            raise Exception("Cannot use the same Synapse terminal for both high and low.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh = whichSynapseTerminal(args[0])
        synapseHigh.rawAsynchronousMoveTo("Source high")
        synapseLow = whichSynapseTerminal(args[1])
        synapseLow.rawAsynchronousMoveTo("Source low")
        sleep(1) #ensure above finished before statement below 
        
        data=generatePulseAndMeasureFromKeithley(args[2], args[3], args[4]/2, args[5], args[6])
        print data
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Pulse sweep completed."
      
    else:
        raise Exception("Number of parameters is wrong, require 7 arguments.")
    
alias('pulseAndMeas2')
 
def pulseAndMeas4(*args):
    ''' send pulse sweep generated by Keithley 2461 to the sample using 4 contact points via Synapse Switch Box, and return the measured data.
    This command takes 9 input parameters:
        The first 4 parameters defines the contact points in the Synapse Switch Box;
        The next 4 parameters defines pulse sweep to be generated by the Keithley 2461.
        The last parameter defines NPLC (must be between 0.01 and 10)
    Command syntax:
        pulseAndMeas source_1_high  source_2_high source_1_low source_2_low current width timeDelay  numberOfPulses nplc
    '''
    if len(args)== 9:
        if len(args[:4])!=len(set(args[:4])):
            raise Exception("Cannot use the same Synapse terminal more than once in this command.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh1 = whichSynapseTerminal(args[0])
        synapseHigh1.rawAsynchronousMoveTo("Source high")
        synapseHigh2 = whichSynapseTerminal(args[1])
        synapseHigh2.rawAsynchronousMoveTo("Source high")
        synapseLow1 = whichSynapseTerminal(args[2])
        synapseLow1.rawAsynchronousMoveTo("Source low")
        synapseLow2 = whichSynapseTerminal(args[3])
        synapseLow2.rawAsynchronousMoveTo("Source low")
        sleep(1)#ensure above finished before statement below

        data=generatePulseAndMeasureFromKeithley(args[4], args[5], args[6]/2, args[7], args[8])
        print data
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Pulse sweep completed."
    
    else:
        raise Exception("Number of parameters is wrong, require 9 arguments.")
    
alias('pulseAndMeas4')
 
def measureResistance(count):
    try:
        keithley = Keithley2461("keithley", KEITHLEY_IP_ADDRESS, KEITHLEY_SOCKET_PORT, KEITHLEY_COMMAND_TERMINATOR)
        keithley.communicator.configure()
        keithley.reset()
        keithley.sourceFunction('CURR')
        keithley.senseFunction('RES')
        keithley.senseAutoRange('RES', 'ON')
        keithley.senseResistanceCompensated('ON')
        resistance=keithley.readResistance(count)
        keithley.closeConnection()
        return resistance
    except Exception as e:
        raise e
    finally:
        if not Keithley2461.isConnectionClosed():
            keithley.closeConnection()
        
def measureVoltage(val, compVoltage, autoRange, rangeValue, state, nplc):
    try:
        keithley = Keithley2461("keithley", KEITHLEY_IP_ADDRESS, KEITHLEY_SOCKET_PORT, KEITHLEY_COMMAND_TERMINATOR)
        keithley.communicator.configure()
        keithley.reset()
        keithley.sourceFunction('CURR')
        keithley.sourceValue('CURR', val)
        keithley.sourceVoltageLimit(compVoltage)
        keithley.senseFunction('VOLT')
        if autoRange:
            keithley.senseAutoRange('VOLT', 'ON')
        else:
            keithley.senseAutoRange('VOLT', 'OFF')
            keithley.senseFunctionRange('VOLT', rangeValue)
        keithley.senseVoltRsen(state)
        voltage=keithley.readVoltage(nplc)
        keithley.closeConnection()
        return voltage
    except Exception as e:
        raise e
    finally:
        if not Keithley2461.isConnectionClosed():
            keithley.closeConnection()
        
def probeRes2(*args):
    ''' measure resistance of the sample using Keithley 2461 using 2 contact points via Synapse Switch Box.
    This command takes only 7 input parameters:
        The first 2 defines the contact points in the Synapse Switch Box;
        The last 5 parameters defines applied current, measuring voltage limit, auto range (0 for OFF, 1 for ON), range value, and NPLC in Keithley 2461.
    Command syntax:
        probeRes source_high  source_low current complianceVoltage autoRange rangeValue nplc
    Note, that not all measurement ranges are allowed, for a forbidden value, it will choose the next higher value.
    '''
    if len(args) == 7:
        if args[0]==args[1]:
            raise Exception("Cannot use the same Synapse terminal for both high and low.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        sleep(1)
        #configure synapse    
        synapseHigh = whichSynapseTerminal(args[0])
        synapseHigh.rawAsynchronousMoveTo("Source high")
        synapseLow = whichSynapseTerminal(args[1])
        synapseLow.rawAsynchronousMoveTo("Source low")
        sleep(1) #ensure above finished before statement below 
        
        voltage=measureVoltage(args[2],args[3],args[4],args[5], 'OFF', args[6])
        print "2-point"
        print "measured voltage = " + str(float(voltage.split(",")[1]))+", thus resistance = "+str(float(voltage.split(",")[1])/float(args[2]))
        sleep(1) #ensure above finished before statement below
     
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Probe Resistance completed."
      
    else:
        raise Exception("Number of parameters is wrong, require 7 arguments.")

alias('probeRes2')
 
def probeRes4(*args):
    ''' measure resistance of the sample using Keithley 2461 using 4 contact points via Synapse Switch Box.
    This command takes only 9 input parameters:
        The first 4 parameters defines the contact points in the Synapse Switch Box;
        The last 5 parameters defines applied current, measuring voltage limit, auto range (0 for OFF, 1 for ON), range value, and NPLC in Keithley 2461.
    Command syntax:
        probeRes source_high  source_low sense_high sense_low current complianceVoltage autoRange rangeValue nplc
    Note, that not all measurement ranges are allowed, for a forbidden value, it will choose the next higher value.
    '''
    if len(args)== 9:
        if len(args[:4])!=len(set(args[:4])):
            raise Exception("Cannot use the same Synapse terminal more than once in this command.")
        synapse_setall.rawAsynchronousMoveTo("Open circuit")
        #configure synapse    
        synapseHigh1 = whichSynapseTerminal(args[0])
        synapseHigh1.rawAsynchronousMoveTo("Source high")
        synapseHigh2 = whichSynapseTerminal(args[1])
        synapseHigh2.rawAsynchronousMoveTo("Source low")
        synapseLow1 = whichSynapseTerminal(args[2])
        synapseLow1.rawAsynchronousMoveTo("Sense high")
        synapseLow2 = whichSynapseTerminal(args[3])
        synapseLow2.rawAsynchronousMoveTo("Sense low")
        sleep(1)#ensure above finished before statement below

        voltage=measureVoltage(args[4], args[5],args[6],args[7], 'ON', args[8])
        print "4-point"
        #print "measured voltage = " + str(voltage)+", thus resistance = "+str(voltage/args[2])
        print "measured voltage = " + str(float(voltage.split(",")[1]))+", thus resistance = "+str(float(voltage.split(",")[1])/args[4])
        sleep(1) #ensure above finished before statement below
       
        synapse_setall.rawAsynchronousMoveTo("STV")
        print "Probe Resistance completed."
    
    else:
        raise Exception("Number of parameters is wrong, require 7 or 9 arguments.")

alias('probeRes4') 

def synapseGround():
    '''set all the nodes to STV
    '''
    synapse_setall.rawAsynchronousMoveTo("STV")
alias("synapseGround")

def synapseOpen():
    '''set all the nodes to Open circuit
    '''
    synapse_setall.rawAsynchronousMoveTo("Open circuit")
alias("synapseOpen")

def synapseConnectSourceHigh(arg):
    '''connect source high to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Source high")
alias("synapseConnectSourceHigh")

def synapseConnectSourceLow(arg):
    '''connect source low to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Source low")
alias("synapseConnectSourceLow")

def synapseConnectSenseHigh(arg):
    '''connect sense high to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Sense high")
alias("synapseConnectSenseHigh")
    
def synapseConnectSenseLow(arg):
    '''connect sense low to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("Sense low")
alias("synapseConnectSenseLow")

def synapseConnectSTV(arg):
    '''connect STV to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("STV")
alias("synapseConnectSTV")

def synapseConnectDVM(arg):
    '''connect DVM to the given terminal 
    '''
    synapse = whichSynapseTerminal(arg)
    synapse.rawAsynchronousMoveTo("DVM")
alias("synapseConnectDVM")

def synapseCG(arg):
    '''connect common ground to specified choice.
    '''
    if not arg in [0,1,2,3,4]:
        raise Exception("Input must be one of [0,1,2,3,4]")
    synapse_cg.rawAsynchronousMoveTo(arg)
alias("synapseCG")

print('done')
