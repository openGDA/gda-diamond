#!/bin/bash
# Expects a parameter line that can be passed on to the gda python script
# Also expects the BEAMLINE variable to be set

export GDA_DEBUG=TRUE #uncomment this line to turn on extra logging for the startup scripts

# Set the value that the BEAMLINE environment variable should be to correctly start from this configuration
# so it can be checked automatically to prevent accidental startup of the wrong beamline.

EXPECTED_BEAMLINE_VALUE=i05-1

# Initialise the workspace and config locations for a standard Diamond Light Source GDA 9 installation, if the
# config tree contains the dls-config/bin folder. This will define the required config environment variables which
# must all be set for the server and client to start successfully.

DLS_CONFIG_BIN_RELATIVE_PATH=../../../gda-diamond.git/dls-config/bin    # adjust this path to suit your location

if [[ -d ${DLS_CONFIG_BIN_RELATIVE_PATH} ]]; then

	source ${DLS_CONFIG_BIN_RELATIVE_PATH}/gda_set_dls_environment_defaults.sh ${EXPECTED_BEAMLINE_VALUE}
fi

##################################################################################################################
# If your installation does not use dls-config or you wish to override the default values set above, please
# set the required variables below this line, also adding any environment variables specific to your installation:
##################################################################################################################

# Source function to perform bash logging
. ${GDA_WORKSPACE_PARENT}/${GDA_CORE_CONFIG_rel}/bin/bashlog_function

if [[ -z "${BEAMLINE-}" ]]; then
    bashlog error "gda Bash script" '$BEAMLINE is not set (or is null) - exiting'
    #echo 'gda Bash script: $BEAMLINE is not set (or is null) - exiting'
    exit 2
fi

PARAMS=$@

bashlog debug "gda Bash script" "Params = $@"

######################################################################
# before the gda-core script is invoked using the environment settings
######################################################################

if [[ "$PARAMS" != *"all"* ]]; then # '--start all' or 'all' not used, so just operate on single component
    # Pass control to the gda_core bash script
    . ${GDA_WORKSPACE_PARENT}/${GDA_CORE_CONFIG_rel}/bin/gda_core "$@"
else # all included as a parameter so start the logpanel, servers and client
    if [[ "$PARAMS" == *"--start all"* ]]; then
        PARAMS="${PARAMS/--start all/}"
    elif [[ "$PARAMS" == *"all"* ]]; then
        PARAMS="${PARAMS/all/}"
    fi

    echo Ensure the Log panel is running...
    . ${GDA_WORKSPACE_PARENT}/${GDA_CORE_CONFIG_rel}/bin/gda_core logpanel

    echo
    echo Making sure we want to restart GDA servers now...
    echo

    . ${GDA_WORKSPACE_PARENT}/${GDA_CORE_CONFIG_rel}/bin/gda_core --restart servers ${PARAMS}

    # look for the output file which will tell us when the servers have started
    ${GDA_WORKSPACE_PARENT}/${GDA_FACILITY_CONFIG_rel}/bin/utils/lookForFile $OBJECT_SERVER_STARTUP_FILE $HOSTNAME

    zenity --title "Start the Client?" --question --text "The GDA servers have restarted. Click OK to start the GDA Client." --window-icon=question
    if [ $? == 0 ] ; then # 0=Ok, 1=Cancel
      echo Starting GDA RCP Client...
      echo
      . ${GDA_WORKSPACE_PARENT}/${GDA_CORE_CONFIG_rel}/bin/gda_core client &
      for i in {10..1}; do echo -n . ; sleep 1 ; done ; echo .
    fi
fi
