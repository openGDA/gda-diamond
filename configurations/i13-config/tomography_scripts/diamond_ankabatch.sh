#!/bin/bash 

#set up some version tracking
svnid='$Id: diamond_ankabatch.sh 231 2012-03-20 15:18:01Z kny48981 $ '
svnurl='$URL: file:///home/kny48981/SVN/progs/scripts/trunk/diamond_ankabatch.sh $ '

source /dls_sw/i12/modulefiles/modules.sh
module add i12
module add global/cluster

usage(){
echo "version information:"
echo $svnid 
echo $svnurl
echo ""
echo "Usage:"
echo "$0 -i input-folder($infolder) -o output-folder($outfilder) [-y year($year) ] -V visit($visit) -f flatfolder($flatfolder) -N n-to-process($nframes) -p nproj($nproj) "
echo ""
echo "-V visit"
echo "-y year"
echo "-i input folder"
echo "-o output folder"
echo "-f flat image folder"
echo "-d dark image folder"
echo "-E energy"
echo "-S pixelsize"
echo "-B Beta"
echo "-D Delta "
echo "-p Number of Projections"
echo "-R raw data folder base"
echo "-n number of parallel jobs"
echo "-N number of images to process in each chunk"
echo "-z z-distance from sampel to detector"
echo "-h help"
}

showvalues(){
 echo "javapath " $javapath
 echo "ankapath " $ankapath
 echo "ankajav " $ankajav
 echo "visit " $visit
 echo "year " $year
 echo "datadir " $datadir
 echo "Beta " $Beta
 echo "Delta " $Delta
 echo "zdist " $zdist
 echo "energy " $energy
 echo "pixelsize " $pixelsize
 echo "visitpath " $visitpath
 echo "rawfolder " $rawfolder
 echo "projpath " $projpath
 echo "flatpath " $flatpath
 echo "darkpath " $darkpath
 echo "darkbox " $darkbox
 echo "outfolder " $outfolder
 echo "outpath " $outpath
 echo "outimpath " $outimpath
 echo "parpath " $parpath
 echo "qshfile " $qshfile
 echo "Nflag " $Nflag
 echo "nflag " $nflag
 echo "nframes " $nframes
 echo "nperchunk " $nperchunk
 echo "lastchunk " $lastchunk
 echo "dflag " $dflag
 echo "darkbox " $darkbox
 echo "fflag " $fflag
 echo "flatbox " $flatbox


}


javapath="/dls_sw/i12/software/tools_versions/tools_v002/jdk_x64/bin/java"
ankapath="/dls_sw/apps/ImageJ/x86_64/ankaphase/AnkaPhasePlugin2/SourceCode/build/"
ankajav="ANKAphase/Bphase_"

#set default values
visit="cm5706-1"
year="2012"
infolder="scan"
flatfolder="flat"
darkfolder="dark"
nframes=1
rawfolder="processing/rawdata"
Beta="0.1"
Delta="0.01"
zdist=1200
energy=53
pixelsize=12.5
nchunks=8

#set all flags to zero
 pflag=0
 Rflag=0
 Oflag=0
 Iflag=0
 fflag=0
 dflag=0
 Nflag=0
 helpflag=0
 nflag=0



while getopts "V:y:i:o:I:f:d:E:S:B:D:p:R:n:N:z:h" flag
do
  case $flag in

  "E")
    energy=$OPTARG
  ;;
  "S")
    pixelsize=$OPTARG
  ;;
  "i")
    infolder=$OPTARG
  ;;
  "p")
    nproj=$OPTARG
    pflag=1
  ;;
  "n")
    nchunks=$OPTARG
    nflag=1
  ;;
  "R")
    rawfolder="$OPTARG"
    Rflag=1
  ;;
  "o")
    outfolder="$OPTARG"
    Oflag=1
  ;;
  "I")
    infmt="$OPTARG"
    Iflag=1
  ;;
  "y")
    year=$OPTARG
  ;;
  "V")
    visit=$OPTARG
  ;;
  "f")
    flatfolder=$OPTARG
    fflag=1
  ;;
  "d")
    darkfolder=$OPTARG
    dflag=1
  ;;
  "N")
     nframes=$OPTARG
     Nflag=1
  ;;
  "B")
     Beta=$OPTARG
  ;;

  "D")
     Delta=$OPTARG
  ;;
  "z")
     zdist=$OPTARG
  ;;

  "h")
     helpflag=1
  ;;
  esac
done

echo "numargs = $#"
if [[ $# -lt 1 ]]
then
   usage
   exit
fi



visitpath="/dls/i12/data/$year/$visit"
projpath="$visitpath/$rawfolder/$infolder/projections/"
flatpath="$visitpath/$rawfolder/$flatfolder/projections/"
darkpath="$visitpath/$rawfolder/$darkfolder/projections/"

if [[ $fflag -eq 1 ]]
then
   flatbox="true"
else
   flatbox="false"
fi

if [[ $dflag -eq 1  ]]
then
   darkbox="true"
else
   darkbox="false"
fi


outpath=$visitpath/$outfolder/$infolder
parpath=$outpath/anka_params/
outimpath=$outpath/phaseprojections/
qshfile="$parpath/runanka.qsh"

(( nperchunk = $nproj / ($nchunks - 1 ) ))

if [[ $Nflag -eq 1 ]]
then
    lastchunk=$nframes
else
   (( lastchunk = $nproj - ($nperchunk * ( $nchunks - 1 ) ) )) 
   (( nframes = $nperchunk ))
fi


if [[ $helpflag -eq 1 ]]
then
   usage
   echo "--- Derived values from the specified input ---"
   showvalues
   exit
fi
if [[ $pflag -eq 0 ]]
then
   echo "number of projections to process is REQUIRED "
   exit
fi

if [[ ! -d $darkpath  && $dflag -eq 1 ]]
then
   echo "Error : dark path $darkpath is not a valid directory"
   exit
fi

if [[ ! -d $flatpath  && $fflag -eq 1 ]]
then
   echo "Error : flat path $flatpath is not a valid directory"
   exit
fi

mkdir -p $outpath
mkdir -p $outimpath
mkdir -p $parpath



cat > $qshfile << ENDQSH
#!/bin/bash -x

#queue script generated by $0
Xvfb :3 &
export DISPLAY=:3

mytask=\$SGE_TASK_ID
(( myidx = \$mytask - 1 ))
parfilename=\`printf "param%03d.txt" \$myidx\`
parfile="$parpath/\$parfilename"
echo "Calling batch program at \`date\`"
( cd $ankapath && $javapath $ankajav \$parfile )
echo "Returned from batch program at \`date\`"
sleep 10

pkill Xvfb

ENDQSH


#create parameter files for each task

for ((i=0;i<$nchunks;i++)){

myidx=$i
 (( finalidx = $nchunks - 1 ))

(( fromnumber = $myidx * $nperchunk + 1 ))

if [[ myidx -eq $finalidx ]]
then
(( tonumber = $fromnumber + $lastchunk ))
else
(( tonumber = $fromnumber + $nframes - 1 ))
fi
(( countnumber = $fromnumber - 1 ))


parfilename=`printf "param%03d.txt" $i`

parfile="$parpath/$parfilename"
cat > $parfile << ENDPARAMS
#
#	general settings
#
#############################################################################
Projection images directory=$projpath
Dark-Field images directory=$darkpath
Flat-Field images 1 directory=$flatpath
Flat-Field images 2 directory=/dls_sw/apps/ImageJ/x86_64/ankaphase/AnkaPhasePlugin2/SourceCode/
CheckBox Dark-field images=$darkbox
CheckBox Flat1-field images=$flatbox
CheckBox Flat2-field images=false
#
#	Save flat-correction settings
#
#############################################################################
Save flat corrected images=false
Save flat corrected images directory=/dls_sw/apps/ImageJ/x86_64/ankaphase/AnkaPhasePlugin2/SourceCode/
Save name of flat corrected images=out
Format of flat corrected images=TIFF 16 bit
Scaling option of flat corrected images=Scale each image to its min/max
Scaling from label=-1
Scaling to label=1
Interpolate Flat-Fields=false
#
#	Phaseretrieval settings
#
#############################################################################
Save phaseretrieval images=true
beta=$Beta
delta=$Delta
distance=$zdist
energy=$energy
pixel Size=$pixelsize
Save flat corrected images directory=$outimpath
Save name of flat corrected images=out
Format of flat corrected images=TIFF 16 bit
Scaling option of flat corrected images=Scale to 3*(max-min) of first image
Scaling from label=-1
Scaling to label=125
Automatic edge extension=false
#
#	run settings
#
#############################################################################
calculate images from to=true
calculate images from=$fromnumber
calculate images to=$tonumber
show images=false
CPUs=7
count starting at=$countnumber
#
#	color settings
#
#############################################################################
Color DarkPath:java.awt.Color[r=192,g=192,b=192]
Color Flat1Path:java.awt.Color[r=255,g=0,b=0]
Color Flat2Path:java.awt.Color[r=192,g=192,b=192]
Color FlatPathOut:java.awt.Color[r=192,g=192,b=192]
Color SaveNameFlat:java.awt.Color[r=192,g=192,b=192]
Color FormatFlat:java.awt.Color[r=192,g=192,b=192]
Color ScalingFlat:java.awt.Color[r=192,g=192,b=192]
Color ScalingFlatFrom:java.awt.Color[r=192,g=192,b=192]
Color ScalingFlat:java.awt.Color[r=192,g=192,b=192]
Color PhasePathOut:java.awt.Color[r=255,g=255,b=255]
Color Beta:java.awt.Color[r=255,g=255,b=255]
Color Delta:java.awt.Color[r=255,g=255,b=255]
Color Distance:java.awt.Color[r=255,g=255,b=255]
Color Energy:java.awt.Color[r=255,g=255,b=255]
Color PixSize:java.awt.Color[r=255,g=255,b=255]
Color SaveNamePhase:java.awt.Color[r=255,g=255,b=255]
Color FormatPhase:java.awt.Color[r=255,g=255,b=255]
Color ScalingPhase:java.awt.Color[r=255,g=255,b=255]
Color ScalingPhaseFrom:java.awt.Color[r=255,g=255,b=255]
Color ScalingPhase:java.awt.Color[r=255,g=255,b=255]
Color Calculate images from:java.awt.Color[r=255,g=255,b=255]
Color Calculate images to:java.awt.Color[r=255,g=255,b=255]
Color CPUs:javax.swing.plaf.ColorUIResource[r=255,g=255,b=255]
ENDPARAMS

}

#finally, launch the queue job
qoutput=`qsub  -P i12 -q medium.q -e  $parpath -o $parpath -pe smp 8 -N batchphase -t 1-$nchunks  $qshfile`
echo "Queue Output was:"
echo $qoutput
