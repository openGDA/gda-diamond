#syntax: call expose <1. exposureTime> <2. filename> <3. binning> 
#		     <4. apply repair correction> <5. poly mscalar> <6. unwarp>
#		     <7. flood poly> <8. export all intermediate images>
#                <9. subtract correlated dark> <10. export compressed>
#                (1=true, 0=false) 
#
# call expose_atlas 1 "D:/Data/Gain_35kev/exposure35kev_01s.img" 1 1 0 0 0 0 0 0

root echo = vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
cmd="root echo = ATLAS Start call expose_atlas "+@1+" \""+@2+"\" "+@3+" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10
mode echo

## Take image and save to /root/tmp

if not (Exist(/ppcdirpnp/data/Image)) jmp image_data_not_found

#Ruby: if not object detector ready jmp DETECTOR_NOT_READY
#Atlas:
#AW: if not valid $(/ppcdirpnp/data/Image) jmp DETECTOR_NOT_READY
if not dbnode /ppcdirpnp/data/Image valid jmp DETECTOR_NOT_READY

label image_data_not_found
#
#### 1. SET UP /root/tmp DIR AND TAKE IMAGE
#
cmd="call setup_node \"/root/tmp\""

       
#Ruby: cmd="sm i "+@1+" bin "+@3+"x"+@3
#Atlas:
cmd="call Image_Start "+@1+" "+@3

#
#### 2. SAVE IMAGE TO /root/tmp
#
#Ruby: wait for object detector ready
#Atlas:
wait for valid $(/ppcdirpnp/data/Image)

#Ruby: api save results to /root/tmp
#Atlas:

((/root/binning):integer=@3)
((time):real=@1)
cmd="db mkdir /root/tmp/Data"
cmd="call Img_Cut \"/ppcdirpnp/data/Image\" \"/root/tmp/Data/Image\" "+$(time)+" "+$(//root/binning)

((/root/tmp/Data/Image/mgcctrl/Axes/omega/StartPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/theta/StartPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/kappa/StartPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/phi/StartPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/cam/StartPosition):real)

((/root/tmp/Data/Image/mgcctrl/Axes/omega/EndPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/theta/EndPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/kappa/EndPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/phi/EndPosition):real)
((/root/tmp/Data/Image/mgcctrl/Axes/cam/EndPosition):real)

((/root/tmp/Data/Image/mgcctrl/Axes/omega/Velocity):real)
((/root/tmp/Data/Image/mgcctrl/Axes/theta/Velocity):real)
((/root/tmp/Data/Image/mgcctrl/Axes/kappa/Velocity):real)
((/root/tmp/Data/Image/mgcctrl/Axes/phi/Velocity):real)
((/root/tmp/Data/Image/mgcctrl/Axes/cam/Velocity):real)

((/root/tmp/Data/Image/detector/Type):string="Atlas")

#
#### 3. APPLY CORRECTIONS (set binning if unwarp...?)
#
cmd="call applyCorrections \"/root/tmp/Data/Image\" "+@4+" "+@5+" "+@6+" "+@7
wait for object cr ready

if (@9==0) jmp export_image
#
## SUBTRACT CORRELATED DARK IF EXISTS
#
if (exist("/root/Dark_"+@1+"_"+@3+"/Data/Dark")) jmp dark_subtract
cmd="call correlateDark_atlas "+@1+" "+@3+" \""+@2+"\" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10
wait for object cr ready

label dark_subtract
($("/tmp/Data/Image")-=$("/root/Dark_"+@1+"_"+@3+"/Data/Dark"))


#
#### 4. EXPORT IMAGE TO FILE NAME
#
label export_image
cmd="call exportImage \"/root/tmp/Data/Image\" \""+@2+"\" "+@10
cmd="root echo = ATLAS End   call expose_atlas "+@1+" \""+@2+"\" "+@3+" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10
root echo = ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
return

label DETECTOR_NOT_READY
root echo = (ERROR) Detector not ready
cmd="root echo = ATLAS End   call expose_atlas "+@1+" \""+@2+"\" "+@3+" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10
root echo = !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
