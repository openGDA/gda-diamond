# To generate a png image of this graph:
# $ module load graphviz
# $ dot -Tpng IS.gv > IS.png

digraph G {
  label = "IS scripts call tree"

  graph [ rankdir = "LR" ];
  edge [ ];
  node [shape=box, color=grey, style=filled];

  ranksep=1;
  {rank = source ; ruby_scripts IS Utility Unreferenced ccdAuxiliary CrysalisDataCollection}
  ruby_scripts			[shape=note style=bold];
  IS				[shape=folder style=bold];
  Utility			[shape=folder style=bold];
  Unreferenced			[shape=folder style=bold];
  ccdAuxiliary			[shape=note style=bold];
  CrysalisDataCollection	[shape=note style=bold];

  ruby_scripts -> Atlas
  ruby_scripts -> Ruby
  Atlas				[shape=box3d style=bold color=green];
  Ruby				[shape=box3d style=bold color=red];

  Atlas -> setDetectorDist
  Atlas -> setFloodFile_atlas
  Atlas -> expose_atlas 
  Atlas -> smi_exps1_atlas 
  Atlas -> smi_exps2_atlas
  Atlas -> correlateDark_atlas
  Atlas -> smi_xps_atlas 
  {rank = same ; expose_atlas smi_exps1_atlas smi_exps2_atlas smi_xps_atlas }
  Atlas -> sh

  Ruby -> setDetectorDist
  Ruby -> setFloodFile
  Ruby -> expose
  Ruby -> smi_exps
  Ruby -> smi_exps1 
  Ruby -> smi_exps2
  Ruby -> smi_expA
  Ruby -> smi_expB
  Ruby -> smi_xps
  Ruby -> importAndCorrect
  Ruby -> exportUpdatedFloodFile
  Ruby -> correctFlood1
  Ruby -> correctFlood2
  Ruby -> correctFlood3
  Ruby -> correlateDark
  {rank = same ; expose smi_exps smi_exps1 smi_exps2 smi_expA smi_expB smi_xps }

  IS -> initialise
  IS -> initialise_ruby
  {rank = same ; initialise initialise_ruby }
  
  Utility -> ddbrowser
  Utility -> replace_overflow
  Utility -> flag_overflow
  
  Unreferenced -> single_img_cor
  Unreferenced -> importAndCorrelate
  Unreferenced -> calib
  Unreferenced -> setReal
  Unreferenced -> setString
  Unreferenced -> DetectorShutter

  ccdAuxiliary -> ccdProcessDoubles
  ccdProcessDoubles	[shape=component style=bold];
  ccdProcessDoubles -> processDouble

  CrysalisDataCollection -> getRunList
  CrysalisDataCollection -> updateFrameDoneInRunFile
  getRunList			[shape=component style=bold];
  updateFrameDoneInRunFile	[shape=component style=bold];

  getRunList -> importRunList
  updateFrameDoneInRunFile -> setInteger
  updateFrameDoneInRunFile -> exportRunList
  {rank = same ; importRunList setInteger exportRunList }

#  Script calls ##################################################
  calib -> export_img_inc

  correctFlood1 -> setup_node
  correctFlood1 -> applyCorrections
  correctFlood1 -> exportImage
  correctFlood1 -> correlateDark

  correctFlood2 -> setup_node
  correctFlood2 -> applyCorrections
  correctFlood2 -> exportImage

  correctFlood3 -> applyCorrections
  correctFlood3 -> exportImage

  correlateDark_atlas -> setup_node__a
  correlateDark_atlas -> Dark_Start
  correlateDark_atlas -> Img_Cut
  correlateDark_atlas -> applyCorrections__a
  correlateDark_atlas -> exportImage__a

  correlateDark -> setup_node
  correlateDark -> applyCorrections
  correlateDark -> exportImage

  darkcurrent -> dark_cor

  ddbrowser -> DBBrowserFunc

  DetectorShutter -> sh

  exportImage -> export_img_inc
  exportImage -> export_img

  exportUpdatedFloodFile -> setFloodFile

  expose -> setup_node
  expose -> applyCorrections
  expose -> correlateDark
  expose -> exportImage

  expose_atlas -> setup_node__a
  expose_atlas -> Image_Start
  expose_atlas -> applyCorrections__a
  expose_atlas -> correlateDark_atlas
  expose_atlas -> exportImage__a

  flag_overflow -> setup_node__u
  flag_overflow -> import_img
  flag_overflow -> exportImage__u

  importAndCorrect -> setup_node
  importAndCorrect -> import_img
  importAndCorrect -> applyCorrections
  importAndCorrect -> exportImage

  importAndCorrelate -> setup_node__u
  importAndCorrelate -> import_img
  importAndCorrelate -> applyCorrections__u
  importAndCorrelate -> export_img_inc

  initialise -> DetectorConnect

  processDouble -> setup_node__u
  processDouble -> import_img
  processDouble -> export_img_inc

  replace_overflow -> setup_node__u
  replace_overflow -> import_img
  replace_overflow -> exportImage__u

  setFloodFile -> import_cfg

  setFloodFile_atlas -> import_cfg

  setDetectorDist -> importAndCorrect

  single_img_cor -> darkcurrent

  smi_expA -> setup_node
  smi_expA -> applyCorrections
  smi_expA -> export_img_inc

  smi_expB -> setup_node
  smi_expB -> applyCorrections
  smi_expB -> export_img
  smi_expB -> export_img_inc

  smi_exps -> setup_node
  smi_exps -> applyCorrections
  smi_exps -> export_img_inc

  smi_exps1_atlas -> setup_node__a
  smi_exps1_atlas -> Scan_Start
  smi_exps1_atlas -> Img_Cut

  smi_exps1 -> setup_node

  smi_exps2_atlas -> applyCorrections__a
  smi_exps2_atlas -> correlateDark_atlas
  smi_exps2_atlas -> exportImage__a

  smi_exps2 -> applyCorrections
  smi_exps2 -> correlateDark
  smi_exps2 -> exportImage

  smi_xps_atlas -> Scan_Start

  xx_is -> darkcurrent

#   Atlas specific scripts ##################################################
  DetectorConnect	[style=bold color=green]
  Img_Cut		[style=bold color=green]
  initialise		[style=bold color=green]
  sh			[style=bold color=green]
  setFloodFile_atlas	[style=bold color=green]

#   Contains "call Image_Start"
  expose_atlas		[style=bold color=green]

#   Contains "call Scan_Start"
  smi_exps1_atlas	[style=bold color=green]
  smi_xps_atlas		[style=bold color=green]

#   Contains atlas detector ready command "wait for valid"
  correlateDark_atlas	[style=bold color=green]
  Dark_Start		[style=bold color=green]
  DetectorShutter	[style=bold color=green]
  Image_Start		[style=bold color=green]
  Scan_Start		[style=bold color=green]

#   Calls an Atlas script
  smi_exps1_atlas	[style=bold color=green]
  smi_exps2_atlas	[color=green]
  smi_xps_atlas		[style=bold color=green]

#   Ruby specific scripts ##################################################

#   Contains "sm m"
  smi_expA		[style=bold color=red]
  smi_expB		[style=bold color=red]
  smi_exps		[style=bold color=red]
  smi_exps1		[style=bold color=red]
  smi_xps		[style=bold color=red]

#   Contains "sm i"
  calib            	[style=bold color=red]
  correctFlood1    	[style=bold color=red]
  correctFlood2    	[style=bold color=red]
  expose           	[style=bold color=red]
  single_img_cor 	[style=bold color=red]
  xx_is            	[style=bold color=red]

#   Contains "detector ready" 
  calib           	[style=bold color=red]
  correctFlood1   	[style=bold color=red]
  correctFlood2   	[style=bold color=red]
  correctFlood3   	[style=bold color=red]
  correlateDark   	[style=bold color=red]
  dark_cor        	[style=bold color=red]
  expose          	[style=bold color=red]
  initialise_ruby 	[style=bold color=red]
  processDouble   	[style=bold color=red]
  single_img_cor  	[style=bold color=red]
  smi_expA        	[style=bold color=red]
  smi_expB        	[style=bold color=red]
  smi_exps        	[style=bold color=red]
  smi_exps1       	[style=bold color=red]
  smi_xps         	[style=bold color=red]
  xx_is           	[style=bold color=red]

#   Contains "save results to" 
  calib           	[style=bold color=red]
  correctFlood1   	[style=bold color=red]
  correctFlood2   	[style=bold color=red]
  correlateDark   	[style=bold color=red]
  dark_cor        	[style=bold color=red]
  expose          	[style=bold color=red]
  single_img_cor  	[style=bold color=red]
  smi_expA        	[style=bold color=red]
  smi_expB        	[style=bold color=red]
  smi_exps        	[style=bold color=red]
  smi_exps1       	[style=bold color=red]
  xx_is           	[style=bold color=red]

#   Other Ruby specific scripts

  setFloodFile    	[style=bold color=red]

#   Ruby specific scripts called

  smi_exps2		[color=red]
  darkcurrent		[color=red]

# Simplifiers ##################################################
  setup_node__		[shape=oval label="setup_node"]
  setup_node -> setup_node__ [dir=back]
  setup_node__a		[shape=oval label="setup_node"]
  setup_node__u		[shape=oval label="setup_node"]

  applyCorrections__ 	[shape=oval label="applyCorrections"]
  applyCorrections -> applyCorrections__ [dir=back]
  applyCorrections__a 	[shape=oval label="applyCorrections"]
  applyCorrections__u	[shape=oval label="applyCorrections"]

  exportImage__ 	[shape=oval label="exportImage"]
  exportImage -> exportImage__ [dir=back]
  exportImage__a 	[shape=oval label="exportImage"]
  exportImage__u	[shape=oval label="exportImage"]

  {rank = same ; setup_node__a setup_node__u
           applyCorrections__a applyCorrections__u
                exportImage__a exportImage__u }

  {rank = same ;  setup_node applyCorrections import_img exportImage}

# Keys ##################################################
  Atlas_specific	[style=bold   color=green     label="Atlas script"]
  Atlas_indirect	[             color=green     label="Atlas script, indirect"]
  Ruby_specific		[style=bold   color=red       label="Ruby script"]
  Ruby_indirect		[             color=red       label="Ruby script, indirect"]
  Python_file		[style=bold   shape=note      label="Python File"]
  Python_class		[style=bold   shape=box3d     label="Python Class"]
  Python_function	[style=bold   shape=component label="Python Function"]

  {rank = sink ; Atlas_specific Atlas_indirect Ruby_specific Ruby_indirect
                 Python_file Python_class Python_function
                 applyCorrections__ setup_node__ exportImage__ }
}
