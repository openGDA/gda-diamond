# syntax: replace_overflow <1. limit> <2. factor> <3. standard image filename>
#			<4. fast image filename> <5. output filename>
#
#i.e. 
# call replace_overflow 110000 10 "c:/Data/tests020309/testAstd.img" "c:/Data/tests020309/testAfast.img" "c:/Data/tests020309/testA.img"
#
# call replace_overflow 110000 10 "c:/tmp/anto3_1_86.img" "c:/tmp/anto3_3_86.img" "c:/tmp/anto3_0_86.img"
#
# Assumes images already saved by other calls to smi_exps2.
#

#
# 1. IMPORT IMAGES
#

cmd="call setup_node \"/root/fast\""
cmd="cr call import_img \""+@4+"\" \"/root/fast\""

wait for object cr ready

cmd="call setup_node \"/root/std\""
cmd="cr call import_img \""+@3+"\" \"/root/std\""

wait for object cr ready

cmd="call setup_node \"/root/out\""
cmd="cr call import_img \""+@3+"\" \"/root/out\""

wait for object cr ready

#
## 2. Replace pixels from 3. with pixels from 4. scaled by 2.
#

((limit):integer)
((factor):real)
((maxs):real)
((maxf):real)
((maxo):real)

($(limit)=@1)
($(factor)=@2)
($(maxs)=Max($(/root/std)))
($(maxf)=Max($(/root/fast)))

($(/root/out/overflow/pixels)=1)
($(/root/out)=ReplaceOverflow($(/root/std),$(limit),$(/root/fast),$(factor)))

#($(/root/out)=FlagOverflow($(/root/std),$(limit)))
#($(/root/out/remeasure/OverflowPixels)=1)

($(maxo)=Max($(/root/out)))
cmd="echo =limit="+$(limit)+", factor="+$(factor)
cmd="echo =max(std)="+$(maxs)+", max(fast)="+$(maxf)+", max(out)="+$(maxo)+" <<<<<<<<<<<<<<<<<<<<<<<<<"

#
## 3. EXPORT IMAGE
#

cmd="call exportImage \"/root/out\" \""+@5+"\" 0"

#restore previous configuration
#!IMAGE EXPORTED
return