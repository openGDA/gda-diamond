#syntax: call smi_exps2b_atlas <1. filename> <2. phiStart> <3. phiStop> <4. phiVel>
#			<5. kappaStart> <6. kappaStop> <7. kappaVel> 
#			<8. omegaStart> <9. omegaStop> <10. omegaVel> 
#			<11. twothetaStart> <12. twothetaStop> <13. twothetaVel> 
#			<14. gammaStart> <15. gammaStop> <16. gammaVel> 
#			<17. detector distance> 
#			<18. apply repair correction> <19. poly mscalar> <20. unwarp>
#			<21. flood poly> <22. export all intermediate images>
#			<23. subtract correlated dark> <24. export compressed> (1=true, 0=false)
#			<25. intensity integral> <26.time> <27. binning>
#			<28. detector maxval> <29. multifactor>
#			<30. final filename> <31. run filename> <32. experiment name>
#
#i.e. call smi_exps2b_atlas "x:/currentdir/testA_slow.img" 11 11 0 23 23 0 20 30 5 99 99 0 44 44 0 123 1 1 0 0 1 1 0 5 1.4 2 220000 1 "x:/currentdir/spool/test/frames/testA.img" "x:/currentdir/spool/test/testA.run"
#                                                          <-------- geometry ------------------->  dd <-crs->       i t   b maxval m final filename                              run filename
#
# Assumes image already saved in /tmp by smi_exps2_atlas. Updates header with
# geometry, detector distance and intensity information
#
################################################################################

root echo = vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
cmd="root echo = ATLAS Start call smi_exps2b_atlas \""+@1+"\" "+@2+" "+@3+" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10+" "+@11+" "+@12+" "+@13+" "+@14+" "+@15+" "+@16+" "+@17+" "+@18+" "+@19+" "+@20+" "+@21+" "+@22+" "+@23+" "+@24+" "+@25+" "+@26+" "+@27+" "+@28+" "+@29+" \""+@30+"\" \""+@31+"\""
mode echo

((detector_maxval):integer=@28)
((multifactor):real=@29)
((final_filename):string=@30)
((run_filename):string=@31)
((experiment_name):string=@32)

#
## INSERT GEOMETRY INTO HEADER
#

((/tmp/Data/Image/mgcctrl/Axes/phi/StartPosition):real=@2)
((/tmp/Data/Image/mgcctrl/Axes/phi/EndPosition):real=@3)
((/tmp/Data/Image/mgcctrl/Axes/phi/Velocity):real=@4)

((/tmp/Data/Image/mgcctrl/Axes/kappa/StartPosition):real=@5)
((/tmp/Data/Image/mgcctrl/Axes/kappa/EndPosition):real=@6)
((/tmp/Data/Image/mgcctrl/Axes/kappa/Velocity):real=@7)

((/tmp/Data/Image/mgcctrl/Axes/omega/StartPosition):real=@8)
((/tmp/Data/Image/mgcctrl/Axes/omega/EndPosition):real=@9)
((/tmp/Data/Image/mgcctrl/Axes/omega/Velocity):real=@10)

((/tmp/Data/Image/mgcctrl/Axes/theta/StartPosition):real=@11)
((/tmp/Data/Image/mgcctrl/Axes/theta/EndPosition):real=@12)
((/tmp/Data/Image/mgcctrl/Axes/theta/Velocity):real=@13)

((/tmp/Data/Image/mgcctrl/Axes/gamma/StartPosition):real=@14)
((/tmp/Data/Image/mgcctrl/Axes/gamma/EndPosition):real=@15)
((/tmp/Data/Image/mgcctrl/Axes/gamma/Velocity):real=@16)

#Ruby: ((/tmp/Data/Image/detector/Type):string="Ruby")
#Atlas:
((/tmp/Data/Image/detector/Type):string="Atlas")

#
## INSERT DETECTOR DISTANCE
#
((/tmp/Data/Image/mgcctrl/Axes/cam/StartPosition):real=@17)
((/tmp/Data/Image/mgcctrl/Axes/cam/EndPosition):real=@17)

label insert_intensity
#
## INSERT INTENSITY
#
((/tmp/Data/Image/crysalis/structures/special/lageneral):integer[10]=((0,0,0,0,0,0,0,0,0,0)))
($[0:1]("/tmp/Data/Image/crysalis/structures/special/lageneral")=@25)

#
#### APPLY CORRECTIONS
#
cmd="call applyCorrections \"/tmp/Data/Image\" "+@18+" "+@19+" "+@20+" "+@21
wait for object cr ready

if (@23==0) jmp export_image
#
## SUBTRACT CORRELATED DARK IF EXISTS
#
if (exist("/root/Dark_"+@26+"_"+@27+"/Data/Dark")) jmp dark_subtract
#Ruby: cmd="call correlateDark "+@26+" "+@27+" \""+@1+"\" "+@18+" "+@19+" "+@20+" "+@21+" "+@22+" "+@23+" "+@24
#Atlas
cmd="call correlateDark_atlas "+@26+" "+@27+" \""+@1+"\" "+@18+" "+@19+" "+@20+" "+@21+" "+@22+" "+@23+" "+@24
wait for object cr ready

label dark_subtract
($("/tmp/Data/Image")-=$("/root/Dark_"+@26+"_"+@27+"/Data/Dark"))


#
#### EXPORT IMAGE TO FILE NAME
#
label export_image
cmd="call exportImage \"/tmp/Data/Image\" \""+@1+"\" "+@24

################################################################################
# (detector_maxval) , (multifactor) , (final_filename) , (run_filename)

if ($(multifactor)==1) jmp slow_image

#-------------------------------------------------------------------------------
label fast_image

# Copy /tmp/Data to /tmp_fast & save a copy of the multifactor.

call setup_node "/tmp_fast"
db cp -r /tmp/Data to /tmp_fast

((/tmp_fast/multifactor):real=$(multifactor))

jmp atlas_image_exported

#-------------------------------------------------------------------------------
label slow_image

((max_fast):real)

# Copy /tmp/Data to /tmp_replaced

call setup_node "/tmp_replaced"
db cp -r /tmp/Data to /tmp_replaced

((/tmp_replaced/Data/Image/overflow/pixels):integer=1)
# If overflow/pixels exists then overflow/threshold (default 0) must exist too
# for export_img to work
((/tmp_replaced/Data/Image/overflow/threshold):integer=0)

# Check if a fast image exists

if (Exist("/tmp_fast/Data/Image")) jmp fast_image_exists

root echo = /tmp_fast/Data/Image doesn't exist! Assume scan with multifactor of 1

($(max_fast)=-999.999)

jmp fast_image_doesnt_exist

#-------------------------------------------------------------------------------
label fast_image_exists

if ($(/tmp_fast/multifactor)==1) jmp fast_image_is_stale

jmp fast_image_is_current

#-------------------------------------------------------------------------------
label fast_image_is_stale

root echo = /tmp_fast/Data/Image has a multifactor of 1! Assume scan with multifactor of 1

($(max_fast)=-999.999)

jmp fast_image_doesnt_exist

#-------------------------------------------------------------------------------
label fast_image_is_current

# Restore multifactor from /tmp_fast

($(multifactor)=$(/tmp_fast/multifactor))

# Replace overflow

($(/tmp_replaced/Data/Image)=ReplaceOverflow($(/tmp/Data/Image),$(detector_maxval),$(/tmp_fast/Data/Image),$(multifactor)))

($(max_fast)=Max($(/tmp_fast/Data/Image)))

#-------------------------------------------------------------------------------
label fast_image_doesnt_exist

# Copy /tmp_replaced to /tmp_final

call setup_node "/tmp_final"
db cp -r /tmp_replaced/Data to /tmp_final

# Flag overflow

((flag_maxval):integer=$(detector_maxval))
($(flag_maxval)*=$(multifactor))

($(/tmp_final/Data/Image)=FlagOverflow($(/tmp_replaced/Data/Image),$(flag_maxval)))
((/tmp_final/Data/Image/remeasure/OverflowPixels):integer=1)
# If remeasure/OverflowPixels exists then remeasure/time (default 0.0) and
# remeasure/factor (default 1.0) must exist too for export_img to work
((/tmp_final/Data/Image/remeasure/time):real=0.0)
((/tmp_final/Data/Image/remeasure/factor):real=1.0)

# Report stats

((max_slow):real)
((max_replaced):real)
((max_final):real)

($(max_slow)=Max($(/tmp/Data/Image)))
($(max_replaced)=Max($(/tmp_replaced/Data/Image)))
($(max_final)=Max($(/tmp_final/Data/Image)))

cmd="root echo = detector_maxval="+$(detector_maxval)+", multifactor="+$(multifactor)
cmd="root echo = flag_maxval="+$(flag_maxval)
cmd="root echo = max(slow)="+$(max_slow)+", max(fast)="+$(max_fast)
cmd="root echo = max(replaced)="+$(max_replaced)+ ", max(final)="+$(max_final)+" <<<<<<<<<<<<<<<<<<<<<<<<<"

# Export final image

cmd="call exportImage \"/tmp_final/Data/Image\" \""+$(final_filename)+"\" "+@24

# update runList

cmd="call runlistAddImage \""+$(experiment_name)+"\" \""+$(run_filename)+"\""

# Clean up

# Does getting rid of the cleanup stop us getting the images with large blank areas?
#db rm /tmp_replaced
#db rm /tmp_final
#db rm /tmp_fast

if (Exist("/tmp_fast/multifactor")) jmp cleanup_tmp_fast_multifactor

jmp atlas_image_exported

#-------------------------------------------------------------------------------
label cleanup_tmp_fast_multifactor

# To protect against accidentally using stale rmp_fast images when switching
# between scan with multifactor=1 and multifactor>1 reset the tmp_fast
# multifactor once the tmp_fast image has been used once.

($(/tmp_fast/multifactor)=1)

#-------------------------------------------------------------------------------
label atlas_image_exported

################################################################################

#restore previous configuration
root echo = ATLAS IMAGE EXPORTED
#!IMAGE EXPORTED
root echo = api:IMAGE EXPORTED
cmd="root echo = ATLAS End   call smi_exps2b_atlas \""+@1+"\" "+@2+" "+@3+" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10+" "+@11+" "+@12+" "+@13+" "+@14+" "+@15+" "+@16+" "+@17+" "+@18+" "+@19+" "+@20+" "+@21+" "+@22+" "+@23+" "+@24+" "+@25+" "+@26+" "+@27+" "+@28+" "+@29+" \""+@30+"\" \""+@31+"\""
root echo = ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
return

#-------------------------------------------------------------------------------
label atlas_image_not_exported
cmd="root echo = ATLAS Error call smi_exps2b_atlas \""+@1+"\" "+@2+" "+@3+" "+@4+" "+@5+" "+@6+" "+@7+" "+@8+" "+@9+" "+@10+" "+@11+" "+@12+" "+@13+" "+@14+" "+@15+" "+@16+" "+@17+" "+@18+" "+@19+" "+@20+" "+@21+" "+@22+" "+@23+" "+@24+" "+@25+" "+@26+" "+@27+" "+@28+" "+@29+" \""+@30+"\" \""+@31+"\""
root echo = !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
return