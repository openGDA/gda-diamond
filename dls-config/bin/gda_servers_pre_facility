# Setup specific to this facility, that is done before the servers are started
bashlog info "gda_servers_pre_facility" "Entered"


# Check that the user actually wants the servers restarted.
if [[ -z "${GDA_NO_PROMPT-}" ]]; then
    if [[ "${GDA_MODE}" == "live" ]]; then
        icon_type="warning"
    else
        icon_type="question"
    fi
    zenity --title "Are you sure?" --question --text "Are you sure you want to ${GDA_OPERATION-restart} the ${GDA_INSTANCE_NAME} GDA servers in ${GDA_MODE} mode?" --window-icon=${icon_type}
    SURE=$?
    if [ $SURE == 1 ]; then # 0=Ok, 1=Cancel
        exit
    fi
fi

# Set up some basic environment
module load global/http_proxy
. ${GDA_WORKSPACE_PARENT}/${GDA_FACILITY_CONFIG_rel}/bin/loadjava.sh

# Define GDA_VAR
if [[ "${GDA_MODE}" == "live" ]]; then
    # GDA_VAR will point to something like /dls_sw/<beamline>/software/gda_versions/var/
    export GDA_VAR=$(readlink -f ${GDA_WORKSPACE_PARENT}/../var)
else
    export GDA_VAR=${GDA_WORKSPACE_PARENT}/var
fi
bashlog info "gda_servers_pre_facility" "set \${GDA_VAR}=${GDA_VAR}"

# Define GDA_LOGS_DIR
if [ "${GDA_MODE}" == "live" ]; then
    # GDA_LOGS_DIR will point to something like /dls_sw/<beamline>/logs/
    export GDA_LOGS_DIR=$(readlink -f ${GDA_WORKSPACE_PARENT}/../../../logs/servers)
else
    export GDA_LOGS_DIR=${GDA_WORKSPACE_PARENT}/logs/servers
fi
bashlog info "gda_servers_pre_facility" "set \${GDA_LOGS_DIR}=${GDA_LOGS_DIR}"

export OBJECT_SERVER_STARTUP_FILE=${GDA_VAR}/object_server_startup_server_main
bashlog info "gda_servers_pre_facility" "set \${OBJECT_SERVER_STARTUP_FILE}=${OBJECT_SERVER_STARTUP_FILE}"
if [[ -f "${OBJECT_SERVER_STARTUP_FILE}" ]]; then
    bashlog info "gda_servers_pre_facility" "deleting ${OBJECT_SERVER_STARTUP_FILE}, last modified $(stat --format=%y ${OBJECT_SERVER_STARTUP_FILE} | cut -c 1-19)"
    rm -fv ${OBJECT_SERVER_STARTUP_FILE}
fi

if [ "$GDA_MODE" = "live" ]; then
    export CONTROL_MACHINE_USER=gda2
    if [ -n "${BEAMLINE}" ]; then
        # This is the normal way the control machine name is constructed at Diamond; set CONTROL_MACHINE_NAME in gdastart_servers_pre_instance is necessary
        export CONTROL_MACHINE_NAME=${BEAMLINE}-control.diamond.ac.uk
    fi
    export CONTROL_MACHINE_SSHKEY_LOC=${GDA_WORKSPACE_PARENT}/${GDA_INSTANCE_CONFIG_rel}/${BEAMLINE}ssh.key
    if [ ! -f "${CONTROL_MACHINE_SSHKEY_LOC}" ]; then
        unset CONTROL_MACHINE_SSHKEY_LOC
    fi
fi

bashlog debug "gda_servers_pre_facility" "Exited"
