#!/bin/bash 

# Command to start the GDA client

DLS_CONFIG=$(readlink -f $(dirname $0)/..)
GDA_INSTALL_GIT_LOC=$(readlink -f $(dirname $0)/../../../)

function gdaclienthelp {
	cat 1>&2 <<EOF
Usage: gdaclient [OPTION]... [-- CLIENT_OPTION [CLIENT_OPTION]...]

Start the GDA client with the default workspace: ${WORKSPACE}

Environment:
  Required:
    BEAMLINE                     Used to determine default directory locations
  Optional:
    GDA_CLIENT                   Override the default client executable
    GDA_CLIENT_VMARGS            Specify additional -vmargs to append
    GDA_CLIENT_LOG_DIR           Override default ErrorFile location
    GDA_CLIENT_WORKSPACE_PARENT  Override the default workspace parent dir
    GDA_CLIENT_CONFIG_PARENT     Override the default configuration parent dir

OPTIONS:
    --help             Print this help and exit.
    --data X           Set the workspace to X.
    --reset            Delete the workspace. Either the default location or the
                       location specified by the --data option.
    --keep             Keep (rename) the old workspace rather than deleting it.
    --log              Don't start the log client when the GDA client is started.
    --nohup Y          Start the client using nohup, redirecting output to file Y.
    --client Z         Use client Z, overriding default and GDA_CLIENT variable.
    --springprofiles P Use the given spring profiles when loading configuration.
                       Overrides values in properties files.
    --                 End argument parsing, send remaining options to the GDA client.

EXAMPLES:

    gdaclient

        This will start the client using the preferences and projects stored in
        the default workspace.

    gdaclient --reset

        This will reset the client preferences and projects back to the initial
        state.

    gdaclient --data /scratch/myworkspace

        This will start the client using the preferences and projects stored in
        /scratch/myworkspace.

    gdaclient --data /scratch/myworkspace --reset

        This will delete /scratch/myworkspace and start the client with
        workspace set to /scratch/myworkspace.

    gdaclient --reset -- -debug

        This will reset the client preferences and projects back to the initial
        state and pass the -debug option to the GDA client.

EOF
}

if [ -z $BEAMLINE ] ; then
	echo "ERROR: BEAMLINE not set" 1>&2
	exit 1
fi

# ensure directory containing workspaces exists, and is writable by everyone
WORKSPACE_PARENT=$GDA_CLIENT_WORKSPACE_PARENT
if [ -z "$WORKSPACE_PARENT" ]; then
	WORKSPACE_PARENT=/scratch/gda_workspaces
fi
[ -d $WORKSPACE_PARENT ] || mkdir -m 777 $WORKSPACE_PARENT

# ensure directory containing configs exists, and is writable by everyone
CONFIG_PARENT=$GDA_CLIENT_CONFIG_PARENT
if [ -z "$CONFIG_PARENT" ]; then
	CONFIG_PARENT=/scratch/gda_configs
fi
[ -d $CONFIG_PARENT ] || mkdir -m 777 $CONFIG_PARENT

# eg /scratch/gda_workspaces/abc12345_gda-9.12
WORKSPACE=$WORKSPACE_PARENT/$(whoami)_$(basename ${GDA_WORKSPACE_PARENT})

ARGS=$(getopt -a -o \? -l help,data:,reset,debug,log,start,keep,mode:,springprofiles:,nohup:,client: -n "gdaclient" -- "$@")

#Bad arguments - getopt returns non-zero
if [ $? -ne 0 ];
then
	gdaclienthelp
	exit 1
fi

#put the values in ARGS into the standard argument variables $1, $2...
eval set -- "$ARGS";


#now handle each argument in turn.

while true; do
  case "$1" in
    --help)
        gdaclienthelp
        exit 0
      ;;
    --reset)
        shift;
        GDA_RESET=1
      ;;
    --debug)
        shift;
        GDA_DEBUG=1
      ;;
    --data)
        shift;
        if [ -n "$1" ]; then
          WORKSPACE="$1"
          shift;
        fi
      ;;
    --keep)
        shift;
        GDA_KEEP=1
      ;;
    --log)
        shift;
        GDA_LOG=0
      ;;
    --start)
        shift;# Ignoring this parameter as being passed through from gda bash script
      ;;
    --nohup)
        shift;
        if [ -n "$1" ]; then
          NOHUP_LOGFILE="$1"
          shift;
        fi
      ;;
    --client)
        shift;
        if [ -n "$1" ]; then
          GDA_CLIENT="$1"
          shift;
        fi
      ;;
    --springprofiles)
        shift;
        if [ -n "$1" ]; then
            GDA_SPRING_PROFILES="-Dgda.spring.profiles.active=$1"
            shift;
        fi
      ;;
    --mode)
        shift;
        if [ -n "$1" ]; then
            # this has most likely already been set by the gda_client_core script
            # but setting again can't hurt...
            export GDA_MODE="$1"
            shift;
        fi
      ;;
    --)
        shift;
        break;
      ;;
    *)
        echo "gdaclient" "Ignoring option $1"
        shift;
      ;;
  esac
done

. /usr/share/Modules/init/bash

. $DLS_CONFIG/bin/loadjava.sh

# GDA_CLIENT not set, and --client not used? - use default location
if [ -z "$GDA_CLIENT" ]; then
	GDA_CLIENT=/dls_sw/$BEAMLINE/software/gda/client/gda-${BEAMLINE}
fi

# canonicalize client executable path
GDA_CLIENT_ORIG=$GDA_CLIENT
GDA_CLIENT=`readlink -f $GDA_CLIENT_ORIG`
if [ $? -gt 0 ]; then
	echo "gdaclient: $GDA_CLIENT_ORIG not found" 1>&2
	exit 1
fi

# get name of directory in which client is installed
CLIENT_DIR=$(basename $(dirname $GDA_CLIENT))

CONFIG_DIRNAME=$(whoami)-$CLIENT_DIR
CONFIG=$CONFIG_PARENT/$CONFIG_DIRNAME

if [ ! -z $GDA_RESET ] ; then
  if [ ! -z $GDA_KEEP ] ; then
    DATETIME=`date +%F-%T`
    echo moving workspace ${WORKSPACE} to ${WORKSPACE}.${DATETIME}
    mv ${WORKSPACE} ${WORKSPACE}.${DATETIME}
    echo moving config ${CONFIG} to ${CONFIG}.${DATETIME}
    mv ${CONFIG} ${CONFIG}.${DATETIME}
  else
    echo deleting workspace ${WORKSPACE}
    rm -rf ${WORKSPACE}
    echo deleting config ${CONFIG}
    rm -rf ${CONFIG}
  fi
else
  GDA_CLIENT_RESET_MESSAGE="If it fails to open, try 'gdaclient --reset'"
fi

if [ -z $GDA_LOG ] ; then
	LOGPANEL=$(ps -ef | grep gdalogpanel | grep -v grep)
	if [ "X$LOGPANEL" == "X" ] ; then
		nohup gdalog 2>/dev/null &
	else
		wmctrl -R "GDA Log Panel"
	fi
fi

ARCH=`/bin/arch`

#set max size of core file created if process terminates unexpectedly
# this value is in 1024-byte blocks (i.e. 10000000 = 10 GB)
ulimit -c 10000000

if [ -z $GDA_CLIENT_LOG_DIR ] ; then
  GDA_CLIENT_LOG_DIR=/dls_sw/$BEAMLINE/logs
fi

notify-send -t 10000 "GDA client is starting... $GDA_CLIENT_RESET_MESSAGE"

PREVMARGS=" -consoleLog -showLocation -data ${WORKSPACE} -configuration ${CONFIG} $@"

# General information about VM options:
#   http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html

# Fatal Error Log (see http://www.oracle.com/technetwork/java/javase/felog-138657.html#felog)
VMARGS="-XX:ErrorFile=$GDA_CLIENT_LOG_DIR/hs_err_pid%p.log $GDA_SPRING_PROFILES $GDA_CLIENT_VMARGS"

if [ ! -z $GDA_DEBUG ] ; then
    VMARGS=" -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8001 $VMARGS"
    echo "Client starting in debug mode, connect on port 8001"
fi

# see http://wiki.eclipse.org/Eclipse.ini
COMMAND="${GDA_CLIENT} $PREVMARGS --launcher.appendVmargs -vmargs -Dgda.install.git.loc=$GDA_INSTALL_GIT_LOC/ $VMARGS"

echo Starting GDA Client...
if [ -z $NOHUP_LOGFILE ] ; then
  echo $COMMAND
  exec $COMMAND
else
  echo  $COMMAND
  echo  $COMMAND >> $NOHUP_LOGFILE
  exec  $COMMAND >> $NOHUP_LOGFILE 2>&1
fi
