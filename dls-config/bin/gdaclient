#!/bin/bash 

# Command to start the GDA client

function gdaclienthelp {
	cat 1>&2 <<EOF
Usage: gdaclient [OPTION]... [-- CLIENT_OPTION [CLIENT_OPTION]... ]

Start the GDA client with the default workspace: ${WORKSPACE}

OPTIONS:
    --help      Print this help and exit.
    --data X    Set the workspace to X.
    --reset     Delete the workspace. Either the default location or the
                location specified by the --data option.
    --keep      Keep (rename) the old workspace rather than deleting it.
    --log       Don't start the log client when the GDA client is started.
    --nohup Y   Start the client using nohup, redirecting output to file Y.
    --client Z  Use client Z, overriding default and GDA_CLIENT variable.
    --          End argument parsing, send remaining options to the GDA client.

EXAMPLES:

    gdaclient

        This will start the client using the preference and projects stored in
        the default workspace.

    gdaclient --reset

        This will reset the client preferences and projects back to the initial
        state.

    gdaclient -data /scratch/myworkspace

        This will start the client using the preference and projects stored in
        /scratch/myworkspace

    gdaclient -data /scratch/myworkspace -reset

        This will delete /scratch/myworkspace and and start the client with
        workspace set to /scratch/myworkspace

    gdaclient --reset -- -debug

        This will reset the client preferences and projects back to the initial
        state and pass the -debug option to the GDA client.

EOF
}

if [ -z $BEAMLINE ] ; then
	echo "ERROR: BEAMLINE not set" 1>&2
	exit 1
fi

if [ -z $WORKSPACE ] ; then
	WORKSPACE="/scratch/${BEAMLINE}_workspace-$(whoami)"
fi

if [ -z $CONFIG ] ; then
	CONFIG="/scratch/${BEAMLINE}_config-$(whoami)"
fi


ARGS=$(getopt -a -o \? -l help,data:,reset,log,keep,nohup:,client: -n "gdaclient" -- "$@")

#Bad arguments - getopt returns non-zero
if [ $? -ne 0 ];
then
	gdaclienthelp
	exit 1
fi

#put the values in ARGS into the standard argument variables $1, $2...
eval set -- "$ARGS";


#now handle each argument in turn.

while true; do
  case "$1" in
    --help)
        gdaclienthelp
        exit 0
      ;;
    --reset)
        shift;
        GDA_RESET=1
        break;
      ;;
    --data)
        shift;
        if [ -n "$1" ]; then
          WORKSPACE="$1"
          shift;
        fi
      ;;
    --keep)
        shift;
        GDA_KEEP=1
      ;;
    --log)
        shift;
        GDA_LOG=0
      ;;
    --nohup)
        shift;
        if [ -n "$1" ]; then
          NOHUP_LOGFILE="$1"
          shift;
        fi
      ;;
    --client)
        shift;
        if [ -n "$1" ]; then
          GDA_CLIENT="$1"
          shift;
        fi
      ;;
    --)
        shift;
        break;
      ;;
  esac
done

. /usr/share/Modules/init/bash
module load java/gda830-64

if [ ! -z $GDA_RESET ] ; then
  if [ ! -z $GDA_KEEP ] ; then
    DATETIME=`date +%F-%T`
    echo moving workspace ${WORKSPACE} to ${WORKSPACE}.${DATETIME}
    mv ${WORKSPACE} ${WORKSPACE}.${DATETIME}
    echo moving config ${CONFIG} to ${CONFIG}.${DATETIME}
    mv ${CONFIG} ${CONFIG}.${DATETIME}
  else
    echo deleting workspace ${WORKSPACE}
    rm -rf ${WORKSPACE}
    echo deleting config ${CONFIG}
    rm -rf ${CONFIG}
  fi
fi

if [ -z $GDA_LOG ] ; then
	LOGPANEL=$(ps -ef | grep LogPanel | grep -v grep)
	if [ "X$LOGPANEL" == "X" ] ; then
		nohup gdalog 2>/dev/null &
	else
		wmctrl -R "GDA Log Panel"
	fi
fi

ARCH=`/bin/arch`

export http_proxy=http://WWWcache.RL.ac.UK:8080/
export MOZILLA_FIVE_HOME=/dls_sw/apps/firefox/8/${ARCH}/

#set max size of core file created if process terminates unexpectedly
ulimit -c 10000000

if [ -z $GDA_CLIENT ] ; then
  GDA_CLIENT=/dls_sw/$BEAMLINE/software/gda/client/gda-${BEAMLINE}
  GDA_CLIENT=`readlink -f $GDA_CLIENT`
fi

notify-send -t 10000 "GDA client is starting... If it fails to open try 'gdaclient --reset'"
COMMAND="${GDA_CLIENT} -showLocation -data ${WORKSPACE} -configuration ${CONFIG} $@"

echo Starting GDA Client...
if [ -z $NOHUP_LOGFILE ] ; then
  echo $COMMAND
  exec $COMMAND
else
  echo  $COMMAND
  echo  $COMMAND >> $NOHUP_LOGFILE
  nohup $COMMAND >> $NOHUP_LOGFILE 2>&1 &
fi